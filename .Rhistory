xlab = "Districts", ylab = "Relative Abundance of Bacterial Isolates (%)", font.label = list(size = 12, color = "black",
style="Times New Roman" )) +
stat_pvalue_manual(pwc2, hide.ns = TRUE) +
labs(
subtitle = get_test_label(res.aov, detailed = TRUE),
caption = get_pwc_label(pwc2)
) + theme(axis.text.x = element_text(angle=60, hjust=1, face = "italic"))
ggbarplot(mydata.long2, x = "variables", y = "value", fill = "Districts",
xlab = "Bacterial Isolaes", ylab = "Relative Abundance of Bacterial Isolates (%)", font.label = list(size = 12, color = "black",
style="Times New Roman" )) +
stat_pvalue_manual(pwc2, hide.ns = TRUE) +
labs(
subtitle = get_test_label(res.aov, detailed = TRUE),
caption = get_pwc_label(pwc2)
) + theme(axis.text.x = element_text(angle=60, hjust=1, face = "italic"))
# Plotting the tukeyHSD for BD
mydata.long2[mydata.long2$variables == "Enterobacter.spp."] = "Enterobacter spp."
ggbarplot(mydata.long2, x = "variables", y = "value", fill = "Districts",
xlab = "Bacterial Isolaes", ylab = "Relative Abundance of Bacterial Isolates (%)", font.label = list(size = 12, color = "black",
style="Times New Roman" )) +
stat_pvalue_manual(pwc2, hide.ns = TRUE) +
labs(
subtitle = get_test_label(res.aov, detailed = TRUE),
caption = get_pwc_label(pwc2)
) + theme(axis.text.x = element_text(angle=60, hjust=1, face = "italic"))
ggbarplot(mydata.long2, x = "variables", y = "value", fill = "Districts",
xlab = "Bacterial Isolates", ylab = "Relative Abundance of Bacterial Isolates (%)", font.label = list(size = 12, color = "black",
style="Times New Roman" )) +
stat_pvalue_manual(pwc2, hide.ns = TRUE) +
labs(
subtitle = get_test_label(res.aov, detailed = TRUE),
caption = get_pwc_label(pwc2)
) + theme(axis.text.x = element_text(angle=60, hjust=1, face = "italic"))
blogdown:::new_post_addin()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
library(leaflet)
popup = c("Robin", "Jakub", "Jannes")
leaflet() %>%
addProviderTiles("NASAGIBS.ViirsEarthAtNight2012") %>%
addMarkers(lng = c(-3, 23, 11),
lat = c(52, 53, 49),
popup = popup)
install.packages("leaflet")
library(leaflet)
library(dplyr)
library(ggplot2)
popup = c("Robin", "Jakub", "Jannes")
leaflet() %>%
addProviderTiles("NASAGIBS.ViirsEarthAtNight2012") %>%
addMarkers(lng = c(-3, 23, 11),
lat = c(52, 53, 49),
popup = popup)
blogdown:::new_post_addin()
install.packages("datasets.load")
data("CO2")
data("CO2")
head(CO2)
data("CO2")
head(CO2)
aggregate(uptake~conc, CO2, mean)
aggregate(uptake ~ conc + Treatment, CO2, mean)
aggregate(uptake ~ conc + Treatment, CO2, mean)
aggregate(uptake ~ conc + Treatment, CO2, summarise, mean = mean(uptake), sd= sd(uptak))
library(dplyr)
library(plyr)
library(dplyr)
library(plyr)
aggregate(uptake ~ conc + Treatment, CO2, summarise, mean = mean(uptake), sd= sd(uptak))
aggregate(uptake ~ conc + Treatment, CO2, summarise,
mean = mean(uptake),
sd= sd(uptak))
aggregate(uptake ~ conc + Treatment, CO2,
mean = mean(uptake),
sd= sd(uptak))
aggregate(uptake ~ conc + Treatment, CO2,summarise,
mean = mean(uptake),
sd= sd(uptak))
aggregate(uptake ~ conc + Treatment, CO2,summarise(mean = mean(uptake)))
aggregate(uptake ~ conc + Treatment, CO2,summarise,mean = mean(uptake), sd = sd(uptake))
#so in .data will be our data and in variables will the variables over which grouping will happen, then .fun will be your function then ... mean addition arguments over your function like
ddply(CO2, c("conc", "Treatment"), summarise, mean = mean(uptake), sd = sd(uptake))
#so in .data will be our data and in variables will the variables over which grouping will happen, then .fun will be your function then ... mean addition arguments over your function like
ddply(CO2, c("conc", "Treatment"), summarise, mean = mean(uptake), sd = sd(uptake), N = length(conc),se = sd/sqrt(N))
#so in .data will be our data and in variables will the variables over which grouping will happen, then .fun will be your function then ... mean addition arguments over your function like
length(conc)
#so in .data will be our data and in variables will the variables over which grouping will happen, then .fun will be your function then ... mean addition arguments over your function like
length(CO2$conc)
ddply(CO2, c("conc", "Treatment"), summarise, mean = mean(uptake), sd = sd(uptake), N= length(conc), se = sd/sqrt(N))
#so in .data will be our data and in variables will the variables over which grouping will happen, then .fun will be your function then ... mean addition arguments over your function like
ddply(CO2, c("conc", "Treatment"), summarise, mean = mean(uptake), sd = sd(uptake), N= length(conc), se = sd/sqrt(N))
#so in .data will be our data and in variables will the variables over which grouping will happen, then .fun will be your function then ... mean addition arguments over your function like
ddply(CO2, c("Treatment", "conc"), summarise, mean = mean(uptake), sd = sd(uptake), N= length(conc), se = sd/sqrt(N))
#so in .data will be our data and in variables will the variables over which grouping will happen, then .fun will be your function then ... mean addition arguments over your function like
ddply(CO2, c("Treatment", "conc"), summarise, mean = mean(uptake), sd = sd(uptake))
#so in .data will be our data and in variables will the variables over which grouping will happen, then .fun will be your function then ... mean addition arguments over your function like
ddply(CO2, c("Treatment", "conc"), summarise, mean = mean(uptake), sd = sd(uptake), N = n(conc))
#so in .data will be our data and in variables will the variables over which grouping will happen, then .fun will be your function then ... mean addition arguments over your function like
ddply(.CO2, c("Treatment", "conc"), summarise, mean = mean(uptake), sd = sd(uptake), N = n(conc))
#so in .data will be our data and in variables will the variables over which grouping will happen, then .fun will be your function then ... mean addition arguments over your function like
ddply(.CO2, c("Treatment", "conc"), summarise, mean = mean(uptake), sd = sd(uptake), N = length(conc))
#so in .data will be our data and in variables will the variables over which grouping will happen, then .fun will be your function then ... mean addition arguments over your function like
ddply(CO2, c("Treatment", "conc"), summarise, mean = mean(uptake), sd = sd(uptake), N = length(conc))
#so in .data will be our data and in variables will the variables over which grouping will happen, then .fun will be your function then ... mean addition arguments over your function like
ddply(CO2, .c("Treatment", "conc"), summarise, mean = mean(uptake), sd = sd(uptake), N = length(conc))
#so in .data will be our data and in variables will the variables over which grouping will happen, then .fun will be your function then ... mean addition arguments over your function like
ddply(CO2, c("Treatment", "conc"), summarise, mean = mean(uptake), sd = sd(uptake), N = length(conc))
#so in .data will be our data and in variables will the variables over which grouping will happen, then .fun will be your function then ... mean addition arguments over your function like
ddply(CO2, c("Treatment", "conc"), summarise, mean = mean(uptake), sd = sd(uptake))
blogdown::serve_site()
aggregate(uptake ~ conc + Treatment, CO2,summarise,mean = mean(uptake), sd = sd(uptake))
aggregate(uptake ~ conc + Treatment, CO2,summarise,mean = mean(uptake), sd = sd(uptake))
aggregate(uptake ~ conc + Treatment, CO2,summarise,mean = mean(uptake), sd = sd(uptake))
blogdown::serve_site()
HP18_VR <- ddply(HP18, c("Var", "Nrate"), summarise,
N    = length(Rep),
mean = mean(Protein12),
sd   = sd(Protein12),
se   = sd / sqrt(N)
)
#hpal 18 varxrate protein
HP18 <- nd %>% filter(SiteYear == "HPAL18")
#Plot1_Var x Yield and N_rate
library(ggplot2)
library(dplyr)
library(plyr)
library(RColorBrewer)
#Data
df <- Data_MS_Thesis
nd <- df
str(nd) #too see the structure of the data (format of the variables)
#Creating a function to calculate standard error
se <- function(x){
sd(x)/sqrt(length(x))
}
#EN19 Var x rate yield
cdata <- ddply(EN19, c("Var", "Nrate"), summarise,
N    = length(Rep),
mean = mean(yieldMg),
sd   = sd(yieldMg),
se   = sd / sqrt(N)
)
cdata %>% ggplot(aes(Var, mean)) +
geom_bar(stat = "identity", aes(fill = as.factor(Nrate)),
position = position_dodge2(0.9)) +
geom_errorbar(aes(ymin = mean - se, ymax = mean + se, group = Nrate),width = 0.4,
position = position_dodge(0.9))+
scale_fill_brewer(palette = "Dark2") + theme_classic()
# EN19 Var x Time
EN19_VT <- ddply(EN19, c("Var", "Timing"), summarise,
N    = length(Rep),
mean = mean(yieldMg),
sd   = sd(yieldMg),
se   = sd / sqrt(N)
)
EN19_VT %>% ggplot(aes(Var, mean)) +
geom_bar(stat = "identity", aes(fill = Timing),
position = position_dodge2(0.9)) +
geom_errorbar(aes(ymin = mean - se, ymax = mean + se, group = Timing),width = 0.4,
position = position_dodge(0.9))+
scale_fill_brewer(palette = "Dark2") + theme_classic()
#prec19 var x rate (yield)
PR19 <- nd %>% filter(SiteYear == "PREC19")
PR19_VR <- ddply(PR19, c("Var", "Nrate"), summarise,
N    = length(Rep),
mean = mean(yieldMg),
sd   = sd(yieldMg),
se   = sd / sqrt(N)
)
PR19_VR %>% ggplot(aes(Var, mean)) +
geom_bar(stat = "identity", aes(fill = as.factor(Nrate)),
position = position_dodge2(0.9)) +
geom_errorbar(aes(ymin = mean - se, ymax = mean + se, group = as.factor(Nrate)),width = 0.4,
position = position_dodge(0.9))+
scale_fill_brewer(palette = "Dark2") + theme_classic()
#hpal 18 varxrate protein
HP18 <- nd %>% filter(SiteYear == "HPAL18")
head(HP18)
HP18_VR <- ddply(HP18, c("Var", "Nrate"), summarise,
N    = length(Rep),
mean = mean(Protein12),
sd   = sd(Protein12),
se   = sd / sqrt(N)
)
HP18_VR %>% ggplot(aes(Var, mean)) +
geom_bar(stat = "identity", aes(fill = as.factor(Nrate)),
position = position_dodge2(0.9)) +
geom_errorbar(aes(ymin = mean - se, ymax = mean + se, group = as.factor(Nrate)),width = 0.4,
position = position_dodge(0.9))+
scale_fill_brewer(palette = "Dark2") + theme_classic()
#protein hpl 19 timexrate
HP19 <- nd %>% filter(SiteYear == "HPAL19")
HP18_VR <- ddply(HP18, c("Timing", "Nrate"), summarise,
N    = length(Rep),
mean = mean(Protein12),
sd   = sd(Protein12),
se   = sd / sqrt(N)
)
str(HP18_VR)
View(HP18_VR)
HP18_VR %>% ggplot(aes(Timing, mean)) +
geom_bar(stat = "identity", aes(fill = as.factor(Nrate)),
position = position_dodge2(0.9)) +
geom_errorbar(aes(ymin = mean - se, ymax = mean + se, group = as.factor(Nrate)),width = 0.4,
position = position_dodge(0.9))+
scale_fill_brewer(palette = "Dark2") + theme_classic()
Data_MS_Thesis <- read.csv("C:/Users/saura/Desktop/Deepak/Data_MS_Thesis.csv", header=FALSE)
View(Data_MS_Thesis)
#Plot1_Var x Yield and N_rate
library(ggplot2)
library(dplyr)
library(plyr)
library(RColorBrewer)
#Data
df <- Data_MS_Thesis
nd <- df
str(nd) #too see the structure of the data (format of the variables)
#Creating a function to calculate standard error
se <- function(x){
sd(x)/sqrt(length(x))
}
#EN19 Var x rate yield
cdata <- ddply(EN19, c("Var", "Nrate"), summarise,
N    = length(Rep),
mean = mean(yieldMg),
sd   = sd(yieldMg),
se   = sd / sqrt(N)
)
cdata %>% ggplot(aes(Var, mean)) +
geom_bar(stat = "identity", aes(fill = as.factor(Nrate)),
position = position_dodge2(0.9)) +
geom_errorbar(aes(ymin = mean - se, ymax = mean + se, group = Nrate),width = 0.4,
position = position_dodge(0.9))+
scale_fill_brewer(palette = "Dark2") + theme_classic()
# EN19 Var x Time
EN19_VT <- ddply(EN19, c("Var", "Timing"), summarise,
N    = length(Rep),
mean = mean(yieldMg),
sd   = sd(yieldMg),
se   = sd / sqrt(N)
)
EN19_VT %>% ggplot(aes(Var, mean)) +
geom_bar(stat = "identity", aes(fill = Timing),
position = position_dodge2(0.9)) +
geom_errorbar(aes(ymin = mean - se, ymax = mean + se, group = Timing),width = 0.4,
position = position_dodge(0.9))+
scale_fill_brewer(palette = "Dark2") + theme_classic()
#prec19 var x rate (yield)
PR19 <- nd %>% filter(SiteYear == "PREC19")
PR19_VR <- ddply(PR19, c("Var", "Nrate"), summarise,
N    = length(Rep),
mean = mean(yieldMg),
sd   = sd(yieldMg),
se   = sd / sqrt(N)
)
PR19_VR %>% ggplot(aes(Var, mean)) +
geom_bar(stat = "identity", aes(fill = as.factor(Nrate)),
position = position_dodge2(0.9)) +
geom_errorbar(aes(ymin = mean - se, ymax = mean + se, group = as.factor(Nrate)),width = 0.4,
position = position_dodge(0.9))+
scale_fill_brewer(palette = "Dark2") + theme_classic()
#hpal 18 varxrate protein
HP18 <- nd %>% filter(SiteYear == "HPAL18")
head(HP18)
HP18_VR <- ddply(HP18, c("Var", "Nrate"), summarise,
N    = length(Rep),
mean = mean(Protein12),
sd   = sd(Protein12),
se   = sd / sqrt(N)
)
HP18_VR %>% ggplot(aes(Var, mean)) +
geom_bar(stat = "identity", aes(fill = as.factor(Nrate)),
position = position_dodge2(0.9)) +
geom_errorbar(aes(ymin = mean - se, ymax = mean + se, group = as.factor(Nrate)),width = 0.4,
position = position_dodge(0.9))+
scale_fill_brewer(palette = "Dark2") + theme_classic()
#protein hpl 19 timexrate
HP19 <- nd %>% filter(SiteYear == "HPAL19")
HP18_VR <- ddply(HP18, c("Timing", "Nrate"), summarise,
N    = length(Rep),
mean = mean(Protein12),
sd   = sd(Protein12),
se   = sd / sqrt(N)
)
str(HP18_VR)
View(HP18_VR)
HP18_VR %>% ggplot(aes(Timing, mean)) +
geom_bar(stat = "identity", aes(fill = as.factor(Nrate)),
position = position_dodge2(0.9)) +
geom_errorbar(aes(ymin = mean - se, ymax = mean + se, group = as.factor(Nrate)),width = 0.4,
position = position_dodge(0.9))+
scale_fill_brewer(palette = "Dark2") + theme_classic()
#Plot1_Var x Yield and N_rate
library(ggplot2)
library(dplyr)
library(plyr)
library(RColorBrewer)
#Data
df <- Data_MS_Thesis
nd <- df
str(nd) #too see the structure of the data (format of the variables)
#Creating a function to calculate standard error
se <- function(x){
sd(x)/sqrt(length(x))
}
#EN19 Var x rate yield
cdata <- ddply(EN19, c("Var", "Nrate"), summarise,
N    = length(Rep),
mean = mean(yieldMg),
sd   = sd(yieldMg),
se   = sd / sqrt(N)
)
cdata %>% ggplot(aes(Var, mean)) +
geom_bar(stat = "identity", aes(fill = as.factor(Nrate)),
position = position_dodge2(0.9)) +
geom_errorbar(aes(ymin = mean - se, ymax = mean + se, group = Nrate),width = 0.4,
position = position_dodge(0.9))+
scale_fill_brewer(palette = "Dark2") + theme_classic()
# EN19 Var x Time
EN19_VT <- ddply(EN19, c("Var", "Timing"), summarise,
N    = length(Rep),
mean = mean(yieldMg),
sd   = sd(yieldMg),
se   = sd / sqrt(N)
)
EN19_VT %>% ggplot(aes(Var, mean)) +
geom_bar(stat = "identity", aes(fill = Timing),
position = position_dodge2(0.9)) +
geom_errorbar(aes(ymin = mean - se, ymax = mean + se, group = Timing),width = 0.4,
position = position_dodge(0.9))+
scale_fill_brewer(palette = "Dark2") + theme_classic()
#prec19 var x rate (yield)
PR19 <- nd %>% filter(SiteYear == "PREC19")
PR19_VR <- ddply(PR19, c("Var", "Nrate"), summarise,
N    = length(Rep),
mean = mean(yieldMg),
sd   = sd(yieldMg),
se   = sd / sqrt(N)
)
PR19_VR %>% ggplot(aes(Var, mean)) +
geom_bar(stat = "identity", aes(fill = as.factor(Nrate)),
position = position_dodge2(0.9)) +
geom_errorbar(aes(ymin = mean - se, ymax = mean + se, group = as.factor(Nrate)),width = 0.4,
position = position_dodge(0.9))+
scale_fill_brewer(palette = "Dark2") + theme_classic()
#hpal 18 varxrate protein
HP18 <- nd %>% filter(SiteYear == "HPAL18")
head(HP18)
HP18_VR <- ddply(HP18, c("Var", "Nrate"), summarise,
N    = length(Rep),
mean = mean(Protein12),
sd   = sd(Protein12),
se   = sd / sqrt(N)
)
HP18_VR %>% ggplot(aes(Var, mean)) +
geom_bar(stat = "identity", aes(fill = as.factor(Nrate)),
position = position_dodge2(0.9)) +
geom_errorbar(aes(ymin = mean - se, ymax = mean + se, group = as.factor(Nrate)),width = 0.4,
position = position_dodge(0.9))+
scale_fill_brewer(palette = "Dark2") + theme_classic()
#protein hpl 19 timexrate
HP19 <- nd %>% filter(SiteYear == "HPAL19")
HP18_VR <- ddply(HP18, c("Timing", "Nrate"), summarise,
N    = length(Rep),
mean = mean(Protein12),
sd   = sd(Protein12),
se   = sd / sqrt(N)
)
str(HP18_VR)
View(HP18_VR)
HP18_VR %>% ggplot(aes(Timing, mean)) +
geom_bar(stat = "identity", aes(fill = as.factor(Nrate)),
position = position_dodge2(0.9)) +
geom_errorbar(aes(ymin = mean - se, ymax = mean + se, group = as.factor(Nrate)),width = 0.4,
position = position_dodge(0.9))+
scale_fill_brewer(palette = "Dark2") + theme_classic()
nd <- df
Data_MS_Thesis <- read.csv("C:/Users/saura/Desktop/Deepak/Data_MS_Thesis.csv")
View(Data_MS_Thesis)
#Plot1_Var x Yield and N_rate
library(ggplot2)
library(dplyr)
library(plyr)
library(RColorBrewer)
#Data
df <- Data_MS_Thesis
nd <- df
str(nd) #too see the structure of the data (format of the variables)
#Creating a function to calculate standard error
se <- function(x){
sd(x)/sqrt(length(x))
}
#EN19 Var x rate yield
EN19 <- nd %>% filter(SiteYear == 'ENREC19')
cdata <- ddply(EN19, c("Var", "Nrate"), summarise,
N    = length(Rep),
mean = mean(yieldMg),
sd   = sd(yieldMg),
se   = sd / sqrt(N)
)
cdata %>% ggplot(aes(Var, mean)) +
geom_bar(stat = "identity", aes(fill = as.factor(Nrate)),
position = position_dodge2(0.9)) +
geom_errorbar(aes(ymin = mean - se, ymax = mean + se, group = Nrate),width = 0.4,
position = position_dodge(0.9))+
scale_fill_brewer(palette = "Dark2") + theme_classic()
# EN19 Var x Time
EN19_VT <- ddply(EN19, c("Var", "Timing"), summarise,
N    = length(Rep),
mean = mean(yieldMg),
sd   = sd(yieldMg),
se   = sd / sqrt(N)
)
EN19_VT %>% ggplot(aes(Var, mean)) +
geom_bar(stat = "identity", aes(fill = Timing),
position = position_dodge2(0.9)) +
geom_errorbar(aes(ymin = mean - se, ymax = mean + se, group = Timing),width = 0.4,
position = position_dodge(0.9))+
scale_fill_brewer(palette = "Dark2") + theme_classic()
#prec19 var x rate (yield)
PR19 <- nd %>% filter(SiteYear == "PREC19")
PR19_VR <- ddply(PR19, c("Var", "Nrate"), summarise,
N    = length(Rep),
mean = mean(yieldMg),
sd   = sd(yieldMg),
se   = sd / sqrt(N)
)
PR19_VR %>% ggplot(aes(Var, mean)) +
geom_bar(stat = "identity", aes(fill = as.factor(Nrate)),
position = position_dodge2(0.9)) +
geom_errorbar(aes(ymin = mean - se, ymax = mean + se, group = as.factor(Nrate)),width = 0.4,
position = position_dodge(0.9))+
scale_fill_brewer(palette = "Dark2") + theme_classic()
#hpal 18 varxrate protein
HP18 <- nd %>% filter(SiteYear == "HPAL18")
head(HP18)
HP18_VR <- ddply(HP18, c("Var", "Nrate"), summarise,
N    = length(Rep),
mean = mean(Protein12),
sd   = sd(Protein12),
se   = sd / sqrt(N)
)
HP18_VR %>% ggplot(aes(Var, mean)) +
geom_bar(stat = "identity", aes(fill = as.factor(Nrate)),
position = position_dodge2(0.9)) +
geom_errorbar(aes(ymin = mean - se, ymax = mean + se, group = as.factor(Nrate)),width = 0.4,
position = position_dodge(0.9))+
scale_fill_brewer(palette = "Dark2") + theme_classic()
#protein hpl 19 timexrate
HP19 <- nd %>% filter(SiteYear == "HPAL19")
HP18_VR <- ddply(HP18, c("Timing", "Nrate"), summarise,
N    = length(Rep),
mean = mean(Protein12),
sd   = sd(Protein12),
se   = sd / sqrt(N)
)
str(HP18_VR)
View(HP18_VR)
HP18_VR %>% ggplot(aes(Timing, mean)) +
geom_bar(stat = "identity", aes(fill = as.factor(Nrate)),
position = position_dodge2(0.9)) +
geom_errorbar(aes(ymin = mean - se, ymax = mean + se, group = as.factor(Nrate)),width = 0.4,
position = position_dodge(0.9))+
scale_fill_brewer(palette = "Dark2") + theme_classic()
View(cdata)
cdata <- ddply(EN19, c("Var", "Nrate", "Rep"), summarise,
N    = length(Rep),
mean = mean(yieldMg),
sd   = sd(yieldMg),
se   = sd / sqrt(N)
)
View(cdata)
cdata <- ddply(EN19, c("Var", "Nrate"), summarise,
N    = 4,
mean = mean(yieldMg),
sd   = sd(yieldMg),
se   = sd / sqrt(N)
)
View(cdata)
cdata <- ddply(EN19, c("Var", "Nrate"), summarise,
N    = n(Rep),
mean = mean(yieldMg),
sd   = sd(yieldMg),
se   = sd / sqrt(N)
)
cdata <- ddply(EN19, c("Var", "Nrate"), summarise,
N    = count(Rep),
mean = mean(yieldMg),
sd   = sd(yieldMg),
se   = sd / sqrt(N)
)
CO2 %>% group_by(Treatment, conc) %>% summarise(mean = mean(uptake), sd = sd(uptake),
N = length(conc), se = sd/sqrt(N))
CO2 %>% group_by(Treatment) %>% summarise(mean = mean(uptake), sd = sd(uptake),
N = length(conc), se = sd/sqrt(N))
CO2 %>% group_by(Treatment) %>% dplyr::summarise(mean = mean(uptake), sd = sd(uptake),
N = length(conc), se = sd/sqrt(N))
CO2 %>% group_by(Treatment, cyl) %>% dplyr::summarise(mean = mean(uptake), sd = sd(uptake),
N = length(conc), se = sd/sqrt(N))
CO2 %>% group_by(Treatment, conc) %>% dplyr::summarise(mean = mean(uptake), sd = sd(uptake),
N = length(conc), se = sd/sqrt(N))
CO2 %>% group_by(Treatment, conc) %>% dplyr::summarise(mean = mean(uptake), sd = sd(uptake),
N = 7, se = sd/sqrt(N))
CO2 %>% group_by(Treatment, conc) %>% summarise(mean = mean(uptake), sd = sd(uptake),                                             N = 7, se = sd/sqrt(N))
CO2 %>% group_by(Treatment, conc) %>% dplyr::summarise(mean = mean(uptake), sd = sd(uptake),
N = 7, se = sd/sqrt(N))
CO2 %>% group_by(Treatment, conc) %>% dplyr::summarise(mean_uptake = mean(uptake), sd = sd(uptake),
N = 7, se = sd/sqrt(N))
