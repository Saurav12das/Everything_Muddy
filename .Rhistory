<<<<<<< HEAD
WD$Location[WD$Location == "MEAD"] <- "Mead"
WD$Location[WD$Location == "Mead"] <- "ENREC"
WD$Location[WD$Location == "Scottsbluff"] <- "PREC"
WD$Location[WD$Location == "Grant"] <- "GRANT"
#out of four one location, one was already named accroding to its research station, so I didn't changed (it was HPAL: High Plains Agricultural Lab, Sidney, NE)
WD$Max.Temp <- as.numeric(WD$Max.Temp)
WD$Min.Temp <- as.numeric(WD$Min.Temp)
WD$Precipitation <- as.numeric(WD$Precipitation)
str(WD)
P1 <- WD %>% mutate(year = year(Date), months = month(Date)) %>%
filter(year %in% 2018:2019) %>% group_by(year) %>%
filter(between(Dates, as.Date("2018-08-01"), as.Date("2019-08-30"))) %>% ggplot(aes(Dates)) +
geom_line(aes(y = Max.Temp, color = "red")) +
scale_x_date(date_labels = "%b", date_breaks = "1 month") +
geom_line(aes(y = Min.Temp,color = "blue")) + facet_wrap(~Location) +
labs(x = "Month", y = "Temperature (°F)", title = "2018 - 2019") +
theme(axis.text.x = element_text(angle = 45)) +
scale_color_identity(guide = "legend", name = "Temperature (°F)", breaks =
c("red", "blue"), labels = c("Maximum Temperature",
"Minimum Temperature"))
#Lets see, what I did here
# I used mutate function to create variables extracting the year and month from the Date so that I can use them later for grouping and filtering the data accordingly
#for first plot I filtered the year 2018 and 2019 from the dataset
#For scaling the x axis I used scale_x_date function, which is much easier rather than creating breaks and limits in scale_x_discrete/scale_x_continuous to properly arrange your axis and here you can use month or week or year breaks defining the limits like 1 week or 4 weeks or say 1 month or 10 years
# I used a variable for first plot or named it as P1 so I can use it in later for other functions
#Another interesting things if you see/ or you want to try, Initally I created the plots without using color as asthetics then I couldn't access the legend function, so I used the color in aes argument in geom_line but after that I saw aes treated them as string variable and my color was not true color they were something else, so I had to fix that using the scale_color_idenity function
#I used facet_wrap to seperate the locations
P1
P2 <- WD %>% mutate(year = year(Date), months = month(Date)) %>%
filter(year %in% 2019:2020) %>% group_by(year) %>%
filter(between(Dates, as.Date("2019-09-01"), as.Date("2020-08-30"))) %>% ggplot(aes(Dates)) +
geom_line(aes(y = Max.Temp, color = "red"), na.rm = TRUE) +
scale_x_date(date_labels = "%b", date_breaks = "1 month") +
geom_line(aes(y = Min.Temp, color = "blue"), na.rm = TRUE) + facet_wrap(~Location) +
labs(x = "Month", y = "Temperature (°F)", title = "2019 - 2020") +
theme(axis.text.x = element_text(angle = 45)) +
scale_color_identity(guide = "legend", name = "Temperature (°F)", breaks =
c("red", "blue"), labels = c("Maximum Temperature",
"Minimum Temperature"))
P2
min <- as.Date("2019-9-1")
max <- NA
P2 <- WD %>% mutate(year = year(Date), months = month(Date)) %>%
filter(year %in% 2019:2020) %>% group_by(year) %>%
filter(between(Dates, as.Date("2019-09-01"), as.Date("2020-08-30"))) %>% ggplot(aes(Dates)) +
geom_line(aes(y = Max.Temp, color = "red"), na.rm = TRUE) +
scale_x_date(date_labels = "%b", date_breaks = "1 month",
labels = c("Sep", "Oct", "Nov", "Dec", "Jan", "Feb", "Mar",
"Apr", "May", "Jun", "Jul"), limits = c(min, max)) +
geom_line(aes(y = Min.Temp, color = "blue"), na.rm = TRUE) + facet_wrap(~Location) +
labs(x = "Month", y = "Temperature (°F)", title = "2019 - 2020") +
theme(axis.text.x = element_text(angle = 45)) +
scale_color_identity(guide = "legend", name = "Temperature (°F)", breaks =
c("red", "blue"), labels = c("Maximum Temperature",
"Minimum Temperature"))
P2
library(cowplot)
plot_grid(P1, P2)
figure <- ggarrange(P1, P2, common.legend = TRUE, legend = "bottom")
annotate_figure(figure, top =
text_grob("Daily Minimum and Maximum temperature", size = 16))
blogdown:::new_post_addin()
blogdown::install_hugo()
blogdown::install_hugo(force = TRUE)
library(ggplot2)
library(dplyr)
library(lubridate)
library(ggpubr)
WD <- read.csv(file = "C://Users//saura//Box//2020//Deepak_MS_Thesis//Weather_Data.csv", header = TRUE, sep = ",")
head(WD)
str(WD)
WD$Date <- parse_date_time(WD$Date, orders = "mdy", tz = "America/Denver")
WD$Dates <- as.Date(WD$Date) # I just wanted to create another variable column naming Dates from the Date variable, so I don't much mess up with the original colum while wrangling (and truley speaking which is actually not necessary you can easily extract the time series data with lubridate package once it is converted to posiXct format)
WD$Location[WD$Location == "GRANT"] <- "Grant"
WD$Location[WD$Location == "MEAD"] <- "Mead"
WD$Location[WD$Location == "Mead"] <- "ENREC"
WD$Location[WD$Location == "Scottsbluff"] <- "PREC"
WD$Location[WD$Location == "Grant"] <- "GRANT"
#out of four one location, one was already named accroding to its research station, so I didn't changed (it was HPAL: High Plains Agricultural Lab, Sidney, NE)
WD$Max.Temp <- as.numeric(WD$Max.Temp)
WD$Min.Temp <- as.numeric(WD$Min.Temp)
WD$Precipitation <- as.numeric(WD$Precipitation)
str(WD)
P1 <- WD %>% mutate(year = year(Date), months = month(Date)) %>%
filter(year %in% 2018:2019) %>% group_by(year) %>%
filter(between(Dates, as.Date("2018-08-01"), as.Date("2019-08-30"))) %>% ggplot(aes(Dates)) +
geom_line(aes(y = Max.Temp, color = "red")) +
scale_x_date(date_labels = "%b", date_breaks = "1 month") +
geom_line(aes(y = Min.Temp,color = "blue")) + facet_wrap(~Location) +
labs(x = "Month", y = "Temperature (°F)", title = "2018 - 2019") +
theme(axis.text.x = element_text(angle = 45)) +
scale_color_identity(guide = "legend", name = "Temperature (°F)", breaks =
c("red", "blue"), labels = c("Maximum Temperature",
"Minimum Temperature"))
#Lets see, what I did here
# I used mutate function to create variables extracting the year and month from the Date so that I can use them later for grouping and filtering the data accordingly
#for first plot I filtered the year 2018 and 2019 from the dataset
#For scaling the x axis I used scale_x_date function, which is much easier rather than creating breaks and limits in scale_x_discrete/scale_x_continuous to properly arrange your axis and here you can use month or week or year breaks defining the limits like 1 week or 4 weeks or say 1 month or 10 years
# I used a variable for first plot or named it as P1 so I can use it in later for other functions
#Another interesting things if you see/ or you want to try, Initally I created the plots without using color as asthetics then I couldn't access the legend function, so I used the color in aes argument in geom_line but after that I saw aes treated them as string variable and my color was not true color they were something else, so I had to fix that using the scale_color_idenity function
#I used facet_wrap to seperate the locations
P1
P2 <- WD %>% mutate(year = year(Date), months = month(Date)) %>%
filter(year %in% 2019:2020) %>% group_by(year) %>%
filter(between(Dates, as.Date("2019-09-01"), as.Date("2020-08-30"))) %>% ggplot(aes(Dates)) +
geom_line(aes(y = Max.Temp, color = "red"), na.rm = TRUE) +
scale_x_date(date_labels = "%b", date_breaks = "1 month") +
geom_line(aes(y = Min.Temp, color = "blue"), na.rm = TRUE) + facet_wrap(~Location) +
labs(x = "Month", y = "Temperature (°F)", title = "2019 - 2020") +
theme(axis.text.x = element_text(angle = 45)) +
scale_color_identity(guide = "legend", name = "Temperature (°F)", breaks =
c("red", "blue"), labels = c("Maximum Temperature",
"Minimum Temperature"))
P2
min <- as.Date("2019-9-1")
max <- NA
P2 <- WD %>% mutate(year = year(Date), months = month(Date)) %>%
filter(year %in% 2019:2020) %>% group_by(year) %>%
filter(between(Dates, as.Date("2019-09-01"), as.Date("2020-08-30"))) %>% ggplot(aes(Dates)) +
geom_line(aes(y = Max.Temp, color = "red"), na.rm = TRUE) +
scale_x_date(date_labels = "%b", date_breaks = "1 month",
labels = c("Sep", "Oct", "Nov", "Dec", "Jan", "Feb", "Mar",
"Apr", "May", "Jun", "Jul"), limits = c(min, max)) +
geom_line(aes(y = Min.Temp, color = "blue"), na.rm = TRUE) + facet_wrap(~Location) +
labs(x = "Month", y = "Temperature (°F)", title = "2019 - 2020") +
theme(axis.text.x = element_text(angle = 45)) +
scale_color_identity(guide = "legend", name = "Temperature (°F)", breaks =
c("red", "blue"), labels = c("Maximum Temperature",
"Minimum Temperature"))
P2
library(cowplot)
plot_grid(P1, P2)
figure <- ggarrange(P1, P2, common.legend = TRUE, legend = "bottom")
annotate_figure(figure, top =
text_grob("Daily Minimum and Maximum temperature", size = 16))
library(ggplot2)
library(dplyr)
library(lubridate)
library(ggpubr)
WD <- read.csv(file = "C://Users//saura//Box//2020//Deepak_MS_Thesis//Weather_Data.csv", header = TRUE, sep = ",")
head(WD)
str(WD)
WD$Date <- parse_date_time(WD$Date, orders = "mdy", tz = "America/Denver")
WD$Dates <- as.Date(WD$Date) # I just wanted to create another variable column naming Dates from the Date variable, so I don't much mess up with the original colum while wrangling (and truley speaking which is actually not necessary you can easily extract the time series data with lubridate package once it is converted to posiXct format)
WD$Location[WD$Location == "GRANT"] <- "Grant"
WD$Location[WD$Location == "MEAD"] <- "Mead"
WD$Location[WD$Location == "Mead"] <- "ENREC"
WD$Location[WD$Location == "Scottsbluff"] <- "PREC"
WD$Location[WD$Location == "Grant"] <- "GRANT"
#out of four one location, one was already named accroding to its research station, so I didn't changed (it was HPAL: High Plains Agricultural Lab, Sidney, NE)
WD$Max.Temp <- as.numeric(WD$Max.Temp)
WD$Min.Temp <- as.numeric(WD$Min.Temp)
WD$Precipitation <- as.numeric(WD$Precipitation)
str(WD)
P1 <- WD %>% mutate(year = year(Date), months = month(Date)) %>%
filter(year %in% 2018:2019) %>% group_by(year) %>%
filter(between(Dates, as.Date("2018-08-01"), as.Date("2019-08-30"))) %>% ggplot(aes(Dates)) +
geom_line(aes(y = Max.Temp, color = "red")) +
scale_x_date(date_labels = "%b", date_breaks = "1 month") +
geom_line(aes(y = Min.Temp,color = "blue")) + facet_wrap(~Location) +
labs(x = "Month", y = "Temperature (°F)", title = "2018 - 2019") +
theme(axis.text.x = element_text(angle = 45)) +
scale_color_identity(guide = "legend", name = "Temperature (°F)", breaks =
c("red", "blue"), labels = c("Maximum Temperature",
"Minimum Temperature"))
#Lets see, what I did here
# I used mutate function to create variables extracting the year and month from the Date so that I can use them later for grouping and filtering the data accordingly
#for first plot I filtered the year 2018 and 2019 from the dataset
#For scaling the x axis I used scale_x_date function, which is much easier rather than creating breaks and limits in scale_x_discrete/scale_x_continuous to properly arrange your axis and here you can use month or week or year breaks defining the limits like 1 week or 4 weeks or say 1 month or 10 years
# I used a variable for first plot or named it as P1 so I can use it in later for other functions
#Another interesting things if you see/ or you want to try, Initally I created the plots without using color as asthetics then I couldn't access the legend function, so I used the color in aes argument in geom_line but after that I saw aes treated them as string variable and my color was not true color they were something else, so I had to fix that using the scale_color_idenity function
#I used facet_wrap to seperate the locations
P1
P2 <- WD %>% mutate(year = year(Date), months = month(Date)) %>%
filter(year %in% 2019:2020) %>% group_by(year) %>%
filter(between(Dates, as.Date("2019-09-01"), as.Date("2020-08-30"))) %>% ggplot(aes(Dates)) +
geom_line(aes(y = Max.Temp, color = "red"), na.rm = TRUE) +
scale_x_date(date_labels = "%b", date_breaks = "1 month") +
geom_line(aes(y = Min.Temp, color = "blue"), na.rm = TRUE) + facet_wrap(~Location) +
labs(x = "Month", y = "Temperature (°F)", title = "2019 - 2020") +
theme(axis.text.x = element_text(angle = 45)) +
scale_color_identity(guide = "legend", name = "Temperature (°F)", breaks =
c("red", "blue"), labels = c("Maximum Temperature",
"Minimum Temperature"))
P2
min <- as.Date("2019-9-1")
max <- NA
P2 <- WD %>% mutate(year = year(Date), months = month(Date)) %>%
filter(year %in% 2019:2020) %>% group_by(year) %>%
filter(between(Dates, as.Date("2019-09-01"), as.Date("2020-08-30"))) %>% ggplot(aes(Dates)) +
geom_line(aes(y = Max.Temp, color = "red"), na.rm = TRUE) +
scale_x_date(date_labels = "%b", date_breaks = "1 month",
labels = c("Sep", "Oct", "Nov", "Dec", "Jan", "Feb", "Mar",
"Apr", "May", "Jun", "Jul"), limits = c(min, max)) +
geom_line(aes(y = Min.Temp, color = "blue"), na.rm = TRUE) + facet_wrap(~Location) +
labs(x = "Month", y = "Temperature (°F)", title = "2019 - 2020") +
theme(axis.text.x = element_text(angle = 45)) +
scale_color_identity(guide = "legend", name = "Temperature (°F)", breaks =
c("red", "blue"), labels = c("Maximum Temperature",
"Minimum Temperature"))
P2
library(cowplot)
plot_grid(P1, P2)
figure <- ggarrange(P1, P2, common.legend = TRUE, legend = "bottom")
annotate_figure(figure, top =
text_grob("Daily Minimum and Maximum temperature", size = 16))
blogdown:::new_post_addin()
```{r}
figure <- ggarrange(P1, P2, common.legend = TRUE, legend = "bottom")
annotate_figure(figure, top =
text_grob("Daily Minimum and Maximum temperature", size = 16))
```
blogdown:::new_post_addin()
blogdown::build_site()
library(ggplot2)
library(dplyr)
library(lubridate)
library(ggpubr)
WD <- read.csv(file = "C://Users//saura//Box//2020//Deepak_MS_Thesis//Weather_Data.csv", header = TRUE, sep = ",")
head(WD)
str(WD)
WD$Date <- parse_date_time(WD$Date, orders = "mdy", tz = "America/Denver")
WD$Dates <- as.Date(WD$Date) # I just wanted to create another variable column naming Dates from the Date variable, so I don't much mess up with the original colum while wrangling (and truley speaking which is actually not necessary you can easily extract the time series data with lubridate package once it is converted to posiXct format)
WD$Location[WD$Location == "GRANT"] <- "Grant"
WD$Location[WD$Location == "MEAD"] <- "Mead"
WD$Location[WD$Location == "Mead"] <- "ENREC"
WD$Location[WD$Location == "Scottsbluff"] <- "PREC"
WD$Location[WD$Location == "Grant"] <- "GRANT"
#out of four one location, one was already named accroding to its research station, so I didn't changed (it was HPAL: High Plains Agricultural Lab, Sidney, NE)
WD$Max.Temp <- as.numeric(WD$Max.Temp)
WD$Min.Temp <- as.numeric(WD$Min.Temp)
WD$Precipitation <- as.numeric(WD$Precipitation)
str(WD)
P1 <- WD %>% mutate(year = year(Date), months = month(Date)) %>%
filter(year %in% 2018:2019) %>% group_by(year) %>%
filter(between(Dates, as.Date("2018-08-01"), as.Date("2019-08-30"))) %>% ggplot(aes(Dates)) +
geom_line(aes(y = Max.Temp, color = "red")) +
scale_x_date(date_labels = "%b", date_breaks = "1 month") +
geom_line(aes(y = Min.Temp,color = "blue")) + facet_wrap(~Location) +
labs(x = "Month", y = "Temperature (°F)", title = "2018 - 2019") +
theme(axis.text.x = element_text(angle = 45)) +
scale_color_identity(guide = "legend", name = "Temperature (°F)", breaks =
c("red", "blue"), labels = c("Maximum Temperature",
"Minimum Temperature"))
#Lets see, what I did here
# I used mutate function to create variables extracting the year and month from the Date so that I can use them later for grouping and filtering the data accordingly
#for first plot I filtered the year 2018 and 2019 from the dataset
#For scaling the x axis I used scale_x_date function, which is much easier rather than creating breaks and limits in scale_x_discrete/scale_x_continuous to properly arrange your axis and here you can use month or week or year breaks defining the limits like 1 week or 4 weeks or say 1 month or 10 years
# I used a variable for first plot or named it as P1 so I can use it in later for other functions
#Another interesting things if you see/ or you want to try, Initally I created the plots without using color as asthetics then I couldn't access the legend function, so I used the color in aes argument in geom_line but after that I saw aes treated them as string variable and my color was not true color they were something else, so I had to fix that using the scale_color_idenity function
#I used facet_wrap to seperate the locations
P1
P2 <- WD %>% mutate(year = year(Date), months = month(Date)) %>%
filter(year %in% 2019:2020) %>% group_by(year) %>%
filter(between(Dates, as.Date("2019-09-01"), as.Date("2020-08-30"))) %>% ggplot(aes(Dates)) +
geom_line(aes(y = Max.Temp, color = "red"), na.rm = TRUE) +
scale_x_date(date_labels = "%b", date_breaks = "1 month") +
geom_line(aes(y = Min.Temp, color = "blue"), na.rm = TRUE) + facet_wrap(~Location) +
labs(x = "Month", y = "Temperature (°F)", title = "2019 - 2020") +
theme(axis.text.x = element_text(angle = 45)) +
scale_color_identity(guide = "legend", name = "Temperature (°F)", breaks =
c("red", "blue"), labels = c("Maximum Temperature",
"Minimum Temperature"))
P2
min <- as.Date("2019-9-1")
max <- NA
P2 <- WD %>% mutate(year = year(Date), months = month(Date)) %>%
filter(year %in% 2019:2020) %>% group_by(year) %>%
filter(between(Dates, as.Date("2019-09-01"), as.Date("2020-08-30"))) %>% ggplot(aes(Dates)) +
geom_line(aes(y = Max.Temp, color = "red"), na.rm = TRUE) +
scale_x_date(date_labels = "%b", date_breaks = "1 month",
labels = c("Sep", "Oct", "Nov", "Dec", "Jan", "Feb", "Mar",
"Apr", "May", "Jun", "Jul"), limits = c(min, max)) +
geom_line(aes(y = Min.Temp, color = "blue"), na.rm = TRUE) + facet_wrap(~Location) +
labs(x = "Month", y = "Temperature (°F)", title = "2019 - 2020") +
theme(axis.text.x = element_text(angle = 45)) +
scale_color_identity(guide = "legend", name = "Temperature (°F)", breaks =
c("red", "blue"), labels = c("Maximum Temperature",
"Minimum Temperature"))
P2
library(cowplot)
plot_grid(P1, P2)
figure <- ggarrange(P1, P2, common.legend = TRUE, legend = "bottom")
annotate_figure(figure, top =
text_grob("Daily Minimum and Maximum temperature", size = 16))
blogdown::build_site()
blogdown:::new_post_addin()
library(ggplot2)
library(dplyr)
library(lubridate)
library(ggpubr)
WD <- read.csv(file = "C://Users//saura//Box//2020//Deepak_MS_Thesis//Weather_Data.csv", header = TRUE, sep = ",")
head(WD)
str(WD)
WD$Date <- parse_date_time(WD$Date, orders = "mdy", tz = "America/Denver")
WD$Dates <- as.Date(WD$Date) # I just wanted to create another variable column naming Dates from the Date variable, so I don't much mess up with the original colum while wrangling (and truley speaking which is actually not necessary you can easily extract the time series data with lubridate package once it is converted to posiXct format)
WD$Location[WD$Location == "GRANT"] <- "Grant"
WD$Location[WD$Location == "MEAD"] <- "Mead"
WD$Location[WD$Location == "Mead"] <- "ENREC"
WD$Location[WD$Location == "Scottsbluff"] <- "PREC"
WD$Location[WD$Location == "Grant"] <- "GRANT"
#out of four one location, one was already named accroding to its research station, so I didn't changed (it was HPAL: High Plains Agricultural Lab, Sidney, NE)
WD$Max.Temp <- as.numeric(WD$Max.Temp)
WD$Min.Temp <- as.numeric(WD$Min.Temp)
WD$Precipitation <- as.numeric(WD$Precipitation)
str(WD)
P1 <- WD %>% mutate(year = year(Date), months = month(Date)) %>%
filter(year %in% 2018:2019) %>% group_by(year) %>%
filter(between(Dates, as.Date("2018-08-01"), as.Date("2019-08-30"))) %>% ggplot(aes(Dates)) +
geom_line(aes(y = Max.Temp, color = "red")) +
scale_x_date(date_labels = "%b", date_breaks = "1 month") +
geom_line(aes(y = Min.Temp,color = "blue")) + facet_wrap(~Location) +
labs(x = "Month", y = "Temperature (°F)", title = "2018 - 2019") +
theme(axis.text.x = element_text(angle = 45)) +
scale_color_identity(guide = "legend", name = "Temperature (°F)", breaks =
c("red", "blue"), labels = c("Maximum Temperature",
"Minimum Temperature"))
#Lets see, what I did here
# I used mutate function to create variables extracting the year and month from the Date so that I can use them later for grouping and filtering the data accordingly
#for first plot I filtered the year 2018 and 2019 from the dataset
#For scaling the x axis I used scale_x_date function, which is much easier rather than creating breaks and limits in scale_x_discrete/scale_x_continuous to properly arrange your axis and here you can use month or week or year breaks defining the limits like 1 week or 4 weeks or say 1 month or 10 years
# I used a variable for first plot or named it as P1 so I can use it in later for other functions
#Another interesting things if you see/ or you want to try, Initally I created the plots without using color as asthetics then I couldn't access the legend function, so I used the color in aes argument in geom_line but after that I saw aes treated them as string variable and my color was not true color they were something else, so I had to fix that using the scale_color_idenity function
#I used facet_wrap to seperate the locations
P1
P2 <- WD %>% mutate(year = year(Date), months = month(Date)) %>%
filter(year %in% 2019:2020) %>% group_by(year) %>%
filter(between(Dates, as.Date("2019-09-01"), as.Date("2020-08-30"))) %>% ggplot(aes(Dates)) +
geom_line(aes(y = Max.Temp, color = "red"), na.rm = TRUE) +
scale_x_date(date_labels = "%b", date_breaks = "1 month") +
geom_line(aes(y = Min.Temp, color = "blue"), na.rm = TRUE) + facet_wrap(~Location) +
labs(x = "Month", y = "Temperature (°F)", title = "2019 - 2020") +
theme(axis.text.x = element_text(angle = 45)) +
scale_color_identity(guide = "legend", name = "Temperature (°F)", breaks =
c("red", "blue"), labels = c("Maximum Temperature",
"Minimum Temperature"))
P2
min <- as.Date("2019-9-1")
max <- NA
P2 <- WD %>% mutate(year = year(Date), months = month(Date)) %>%
filter(year %in% 2019:2020) %>% group_by(year) %>%
filter(between(Dates, as.Date("2019-09-01"), as.Date("2020-08-30"))) %>% ggplot(aes(Dates)) +
geom_line(aes(y = Max.Temp, color = "red"), na.rm = TRUE) +
scale_x_date(date_labels = "%b", date_breaks = "1 month",
labels = c("Sep", "Oct", "Nov", "Dec", "Jan", "Feb", "Mar",
"Apr", "May", "Jun", "Jul"), limits = c(min, max)) +
geom_line(aes(y = Min.Temp, color = "blue"), na.rm = TRUE) + facet_wrap(~Location) +
labs(x = "Month", y = "Temperature (°F)", title = "2019 - 2020") +
theme(axis.text.x = element_text(angle = 45)) +
scale_color_identity(guide = "legend", name = "Temperature (°F)", breaks =
c("red", "blue"), labels = c("Maximum Temperature",
"Minimum Temperature"))
P2
library(cowplot)
plot_grid(P1, P2)
figure <- ggarrange(P1, P2, common.legend = TRUE, legend = "bottom")
annotate_figure(figure, top =
text_grob("Daily Minimum and Maximum temperature", size = 16))
blogdown::build_site()
blogdown::serve_site()
library(ggplot2)
library(dplyr)
library(lubridate)
library(ggpubr)
WD <- read.csv(file = "C://Users//saura//Box//2020//Deepak_MS_Thesis//Weather_Data.csv", header = TRUE, sep = ",")
head(WD)
str(WD)
WD$Date <- parse_date_time(WD$Date, orders = "mdy", tz = "America/Denver")
WD$Dates <- as.Date(WD$Date) # I just wanted to create another variable column naming Dates from the Date variable, so I don't much mess up with the original colum while wrangling (and truley speaking which is actually not necessary you can easily extract the time series data with lubridate package once it is converted to posiXct format)
WD$Location[WD$Location == "GRANT"] <- "Grant"
WD$Location[WD$Location == "MEAD"] <- "Mead"
WD$Location[WD$Location == "Mead"] <- "ENREC"
WD$Location[WD$Location == "Scottsbluff"] <- "PREC"
WD$Location[WD$Location == "Grant"] <- "GRANT"
#out of four one location, one was already named accroding to its research station, so I didn't changed (it was HPAL: High Plains Agricultural Lab, Sidney, NE)
WD$Max.Temp <- as.numeric(WD$Max.Temp)
WD$Min.Temp <- as.numeric(WD$Min.Temp)
WD$Precipitation <- as.numeric(WD$Precipitation)
str(WD)
P1 <- WD %>% mutate(year = year(Date), months = month(Date)) %>%
filter(year %in% 2018:2019) %>% group_by(year) %>%
filter(between(Dates, as.Date("2018-08-01"), as.Date("2019-08-30"))) %>% ggplot(aes(Dates)) +
geom_line(aes(y = Max.Temp, color = "red")) +
scale_x_date(date_labels = "%b", date_breaks = "1 month") +
geom_line(aes(y = Min.Temp,color = "blue")) + facet_wrap(~Location) +
labs(x = "Month", y = "Temperature (°F)", title = "2018 - 2019") +
theme(axis.text.x = element_text(angle = 45)) +
scale_color_identity(guide = "legend", name = "Temperature (°F)", breaks =
c("red", "blue"), labels = c("Maximum Temperature",
"Minimum Temperature"))
#Lets see, what I did here
# I used mutate function to create variables extracting the year and month from the Date so that I can use them later for grouping and filtering the data accordingly
#for first plot I filtered the year 2018 and 2019 from the dataset
#For scaling the x axis I used scale_x_date function, which is much easier rather than creating breaks and limits in scale_x_discrete/scale_x_continuous to properly arrange your axis and here you can use month or week or year breaks defining the limits like 1 week or 4 weeks or say 1 month or 10 years
# I used a variable for first plot or named it as P1 so I can use it in later for other functions
#Another interesting things if you see/ or you want to try, Initally I created the plots without using color as asthetics then I couldn't access the legend function, so I used the color in aes argument in geom_line but after that I saw aes treated them as string variable and my color was not true color they were something else, so I had to fix that using the scale_color_idenity function
#I used facet_wrap to seperate the locations
P1
P2 <- WD %>% mutate(year = year(Date), months = month(Date)) %>%
filter(year %in% 2019:2020) %>% group_by(year) %>%
filter(between(Dates, as.Date("2019-09-01"), as.Date("2020-08-30"))) %>% ggplot(aes(Dates)) +
geom_line(aes(y = Max.Temp, color = "red"), na.rm = TRUE) +
scale_x_date(date_labels = "%b", date_breaks = "1 month") +
geom_line(aes(y = Min.Temp, color = "blue"), na.rm = TRUE) + facet_wrap(~Location) +
labs(x = "Month", y = "Temperature (°F)", title = "2019 - 2020") +
theme(axis.text.x = element_text(angle = 45)) +
scale_color_identity(guide = "legend", name = "Temperature (°F)", breaks =
c("red", "blue"), labels = c("Maximum Temperature",
"Minimum Temperature"))
P2
min <- as.Date("2019-9-1")
max <- NA
P2 <- WD %>% mutate(year = year(Date), months = month(Date)) %>%
filter(year %in% 2019:2020) %>% group_by(year) %>%
filter(between(Dates, as.Date("2019-09-01"), as.Date("2020-08-30"))) %>% ggplot(aes(Dates)) +
geom_line(aes(y = Max.Temp, color = "red"), na.rm = TRUE) +
scale_x_date(date_labels = "%b", date_breaks = "1 month",
labels = c("Sep", "Oct", "Nov", "Dec", "Jan", "Feb", "Mar",
"Apr", "May", "Jun", "Jul"), limits = c(min, max)) +
geom_line(aes(y = Min.Temp, color = "blue"), na.rm = TRUE) + facet_wrap(~Location) +
labs(x = "Month", y = "Temperature (°F)", title = "2019 - 2020") +
theme(axis.text.x = element_text(angle = 45)) +
scale_color_identity(guide = "legend", name = "Temperature (°F)", breaks =
c("red", "blue"), labels = c("Maximum Temperature",
"Minimum Temperature"))
P2
library(cowplot)
plot_grid(P1, P2)
figure <- ggarrange(P1, P2, common.legend = TRUE, legend = "bottom")
annotate_figure(figure, top =
text_grob("Daily Minimum and Maximum temperature", size = 16))
blogdown::build_site()
blogdown::serve_site()
blogdown::build_site()
dd
master
Bacterial.Diversity <- read.csv("C:/Users/saura/Box/2020/Ashish_Seq/R_Analysis/Bacterial Diversity.csv")
View(Bacterial.Diversity)
#loading the library
library(tidyverse)
library(dplyr)
library(rstatix)
library(ggpubr)
#Loading the data Bacterial Diversity
BD <- Bacterial.Diversity
#transforming the data Bacterial Diversity
mydata.long2 <- BD %>%
pivot_longer(-Districts, names_to = "variables", values_to = "value")
#calculating tukey HSD for Bacterial Diversity
pwc2 <- mydata.long2 %>% tukey_hsd(value ~ Districts)
#calculating ANOVA
res.aov <- mydata.long2 %>% anova_test(value ~ variables)
# Plotting the tukeyHSD for BD
pwc2 <- pwc2 %>% add_xy_position(x = "variables")
ggbarplot(mydata.long2, x = "variables", y = "value", fill = "Districts",
xlab = "Districts", ylab = "Relative Abundance of Bacterial Isolates (%)", font.label = list(size = 12, color = "black",
style="Times New Roman" )) +
stat_pvalue_manual(pwc2, hide.ns = TRUE) +
labs(
subtitle = get_test_label(res.aov, detailed = TRUE),
caption = get_pwc_label(pwc2)
) + theme(axis.text.x = element_text(angle=60, hjust=1, face = "italic"))
ggbarplot(mydata.long2, x = "variables", y = "value", fill = "Districts",
xlab = "Bacterial Isolaes", ylab = "Relative Abundance of Bacterial Isolates (%)", font.label = list(size = 12, color = "black",
style="Times New Roman" )) +
stat_pvalue_manual(pwc2, hide.ns = TRUE) +
labs(
subtitle = get_test_label(res.aov, detailed = TRUE),
caption = get_pwc_label(pwc2)
) + theme(axis.text.x = element_text(angle=60, hjust=1, face = "italic"))
# Plotting the tukeyHSD for BD
mydata.long2[mydata.long2$variables == "Enterobacter.spp."] = "Enterobacter spp."
ggbarplot(mydata.long2, x = "variables", y = "value", fill = "Districts",
xlab = "Bacterial Isolaes", ylab = "Relative Abundance of Bacterial Isolates (%)", font.label = list(size = 12, color = "black",
style="Times New Roman" )) +
stat_pvalue_manual(pwc2, hide.ns = TRUE) +
labs(
subtitle = get_test_label(res.aov, detailed = TRUE),
caption = get_pwc_label(pwc2)
) + theme(axis.text.x = element_text(angle=60, hjust=1, face = "italic"))
ggbarplot(mydata.long2, x = "variables", y = "value", fill = "Districts",
xlab = "Bacterial Isolates", ylab = "Relative Abundance of Bacterial Isolates (%)", font.label = list(size = 12, color = "black",
style="Times New Roman" )) +
stat_pvalue_manual(pwc2, hide.ns = TRUE) +
labs(
subtitle = get_test_label(res.aov, detailed = TRUE),
caption = get_pwc_label(pwc2)
) + theme(axis.text.x = element_text(angle=60, hjust=1, face = "italic"))
blogdown:::new_post_addin()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
library(leaflet)
popup = c("Robin", "Jakub", "Jannes")
leaflet() %>%
addProviderTiles("NASAGIBS.ViirsEarthAtNight2012") %>%
addMarkers(lng = c(-3, 23, 11),
lat = c(52, 53, 49),
popup = popup)
install.packages("leaflet")
library(leaflet)
library(dplyr)
library(ggplot2)
popup = c("Robin", "Jakub", "Jannes")
leaflet() %>%
addProviderTiles("NASAGIBS.ViirsEarthAtNight2012") %>%
addMarkers(lng = c(-3, 23, 11),
lat = c(52, 53, 49),
popup = popup)
=======
#Joining the full data_frame
CD3 <- full_join(BB2, HK2, by = c("Poll.Question", "Poll.Option")) %>% full_join(.,LK2, by= c("Poll.Question", "Poll.Option")) %>%
full_join(.,MD2, by= c("Poll.Question", "Poll.Option")) %>%
full_join(.,NF2, by= c("Poll.Question", "Poll.Option")) %>%
full_join(.,YK2, by= c("Poll.Question", "Poll.Option")) %>%
full_join(.,BR2, by = c("Poll.Question", "Poll.Option"))
View(CD3)
##changing the names
setnames(CD3, old = c("Count.x", "Count.y","Count.x.x", "Count.y.y", "Count.x.x.x", "Count.y.y.y", "Count"), new = c("Borken_Bow", "Hickman", "Lincoln", "Mead", "Norfolk", "York", "Bridgeport"))
CD4 <- gather(CD3, "Borken_Bow", "Hickman", "Lincoln", "Mead", "Norfolk", "York", "Bridgeport",key = "Location", value = "Count")
CD4$Poll.Question <- factor(CD4$Poll.Question, levels = c("1.  If the change makes my operation more dollars", "2.  I want to leave my land better for the next generation","3.  Improve my soil organic matter and soil carbon","4.  Because my landlord wants me to","5.  Discounted crop insurance rates","6.  Improve my crop yields","7.  Increase the value of my land for a future sale","8.  Increase my soil water infiltration","9.  Decrease nitrogen leaching into groundwater", "10. Decrease topsoil erosion ", "11. Decrease pesticide and nutrient loss in water runoff from my fields", "12. Decrease weather risk and increase weather resiliency of my crops", "13. Increase weed control", "14. Reduce herbicide use"))
CD4 %>% ggplot(aes(Poll.Option, Count)) + geom_bar(aes(fill = Location), stat = "identity") + facet_wrap(~CD4$Poll.Question, ncol = 7, labeller = label_wrap_gen()) + scale_fill_brewer(palette = "Set1") + labs(x = "Ratings", y = "Number of Response") + theme(strip.text.x = element_text(size = 10, face = "bold"), axis.title = element_text(size = 12, face = "bold"), axis.text.x = element_text(size = 12), axis.text.y = element_text(size = 12)) + labs(title = "Incentives that drives most to make changes to improve soil health", subtitle = "Soil Health Survey, NE, 2020")
#Dataframe for cover crop acreage
CC <- Cover_Crop_Acerage[,-c(9:11)]
CCN <- gather(CC,"Norfolk", "York", "Hickman", "Mead", "Lincoln", "Broken_Bow", "Bridgeport",key = "Location", value = "Count")
CCN$Area <- factor(CCN$Area, levels = c("0", "1 - 199", "200 - 999", "1000 - 3,999", "> 4000"))
CCN %>% ggplot(aes(Area, Count)) + geom_bar(stat = "identity", aes(fill= Location)) + scale_fill_brewer(palette = "Dark2") + labs(x = "Cover Crops Acreage", y = "Number of Responses", title = "Cover Crop Acreage", subtitle = "Soil Health Survey, NE, 2020")
CD4 %>% ggplot(aes(Poll.Option, Count)) + geom_bar(aes(fill = Location), stat = "identity") + facet_wrap(~CD4$Poll.Question, ncol = 7, labeller = label_wrap_gen()) + scale_fill_brewer(palette = "Set1") + labs(x = "Ratings", y = "Number of Response") + theme(strip.text.x = element_text(size = 10, face = "bold"), axis.title = element_text(size = 12, face = "bold"), axis.text.x = element_text(size = 12), axis.text.y = element_text(size = 12)) + labs(title = "Incentives that drives most to make changes to improve soil health", subtitle = "Soil Health Survey, NE, 2020")
CD4 %>% ggplot(aes(Poll.Option, Count)) + geom_bar(aes(fill = Location), stat = "identity") + facet_wrap(~CD4$Poll.Question, ncol = 7, labeller = label_wrap_gen()) + scale_fill_brewer(palette = "Set1") + labs(x = "Ratings", y = "Number of Response") + theme(strip.text.x = element_text(size = 10, face = "bold"), axis.title = element_text(size = 12, face = "bold"), axis.text.x = element_text(size = 12), axis.text.y = element_text(size = 12)) + labs(title = "Incentives that drives most to make changes to improve soil health", subtitle = "Soil Health Survey, NE, 2020") + theme(legend.position = "top")
CD4 %>% ggplot(aes(Poll.Option, Count)) + geom_bar(aes(fill = Location), stat = "identity") + facet_wrap(~CD4$Poll.Question, ncol = 7, labeller = label_wrap_gen()) + scale_fill_brewer(palette = "Set1") + labs(x = "Ratings", y = "Number of Response") + theme(strip.text.x = element_text(size = 10, face = "bold"), axis.title = element_text(size = 12, face = "bold"), axis.text.x = element_text(size = 12), axis.text.y = element_text(size = 12)) + labs(title = "Incentives that drives most to make changes to improve soil health", subtitle = "Soil Health Survey, NE, 2020") + theme(legend.position = c(5, 50))
CD4 %>% ggplot(aes(Poll.Option, Count)) + geom_bar(aes(fill = Location), stat = "identity") + facet_wrap(~CD4$Poll.Question, ncol = 7, labeller = label_wrap_gen()) + scale_fill_brewer(palette = "Set1") + labs(x = "Ratings", y = "Number of Response") + theme(strip.text.x = element_text(size = 10, face = "bold"), axis.title = element_text(size = 12, face = "bold"), axis.text.x = element_text(size = 12), axis.text.y = element_text(size = 12)) + labs(title = "Incentives that drives most to make changes to improve soil health", subtitle = "Soil Health Survey, NE, 2020") + theme(legend.position = c(5, 150))
CD4 %>% ggplot(aes(Poll.Option, Count)) + geom_bar(aes(fill = Location), stat = "identity") + facet_wrap(~CD4$Poll.Question, ncol = 7, labeller = label_wrap_gen()) + scale_fill_brewer(palette = "Set1") + labs(x = "Ratings", y = "Number of Response") + theme(strip.text.x = element_text(size = 10, face = "bold"), axis.title = element_text(size = 12, face = "bold"), axis.text.x = element_text(size = 12), axis.text.y = element_text(size = 12)) + labs(title = "Incentives that drives most to make changes to improve soil health", subtitle = "Soil Health Survey, NE, 2020") + theme(legend.position = c(1,1))
CD4 %>% ggplot(aes(Poll.Option, Count)) + geom_bar(aes(fill = Location), stat = "identity") + facet_wrap(~CD4$Poll.Question, ncol = 7, labeller = label_wrap_gen()) + scale_fill_brewer(palette = "Set1") + labs(x = "Ratings", y = "Number of Response") + theme(strip.text.x = element_text(size = 10, face = "bold"), axis.title = element_text(size = 12, face = "bold"), axis.text.x = element_text(size = 12), axis.text.y = element_text(size = 12)) + labs(title = "Incentives that drives most to make changes to improve soil health", subtitle = "Soil Health Survey, NE, 2020") + theme(legend.position = c(1,2))
CD4 %>% ggplot(aes(Poll.Option, Count)) + geom_bar(aes(fill = Location), stat = "identity") + facet_wrap(~CD4$Poll.Question, ncol = 7, labeller = label_wrap_gen()) + scale_fill_brewer(palette = "Set1") + labs(x = "Ratings", y = "Number of Response") + theme(strip.text.x = element_text(size = 10, face = "bold"), axis.title = element_text(size = 12, face = "bold"), axis.text.x = element_text(size = 12), axis.text.y = element_text(size = 12)) + labs(title = "Incentives that drives most to make changes to improve soil health", subtitle = "Soil Health Survey, NE, 2020") + theme(legend.position = c(2,1))
CD4 %>% ggplot(aes(Poll.Option, Count)) + geom_bar(aes(fill = Location), stat = "identity") + facet_wrap(~CD4$Poll.Question, ncol = 7, labeller = label_wrap_gen()) + scale_fill_brewer(palette = "Set1") + labs(x = "Ratings", y = "Number of Response") + theme(strip.text.x = element_text(size = 10, face = "bold"), axis.title = element_text(size = 12, face = "bold"), axis.text.x = element_text(size = 12), axis.text.y = element_text(size = 12)) + labs(title = "Incentives that drives most to make changes to improve soil health", subtitle = "Soil Health Survey, NE, 2020") + theme(legend.position = c(1,1))
CD4 %>% ggplot(aes(Poll.Option, Count)) + geom_bar(aes(fill = Location), stat = "identity") + facet_wrap(~CD4$Poll.Question, ncol = 7, labeller = label_wrap_gen()) + scale_fill_brewer(palette = "Set1") + labs(x = "Ratings", y = "Number of Response") + theme(strip.text.x = element_text(size = 10, face = "bold"), axis.title = element_text(size = 12, face = "bold"), axis.text.x = element_text(size = 12), axis.text.y = element_text(size = 12)) + labs(title = "Incentives that drives most to make changes to improve soil health", subtitle = "Soil Health Survey, NE, 2020") + theme(legend.position = c(0.1,1))
CD4 %>% ggplot(aes(Poll.Option, Count)) + geom_bar(aes(fill = Location), stat = "identity") + facet_wrap(~CD4$Poll.Question, ncol = 7, labeller = label_wrap_gen()) + scale_fill_brewer(palette = "Set1") + labs(x = "Ratings", y = "Number of Response") + theme(strip.text.x = element_text(size = 10, face = "bold"), axis.title = element_text(size = 12, face = "bold"), axis.text.x = element_text(size = 12), axis.text.y = element_text(size = 12)) + labs(title = "Incentives that drives most to make changes to improve soil health", subtitle = "Soil Health Survey, NE, 2020") + theme(legend.position = c(0.8,1))
CD4 %>% ggplot(aes(Poll.Option, Count)) + geom_bar(aes(fill = Location), stat = "identity") + facet_wrap(~CD4$Poll.Question, ncol = 7, labeller = label_wrap_gen()) + scale_fill_brewer(palette = "Set1") + labs(x = "Ratings", y = "Number of Response") + theme(strip.text.x = element_text(size = 10, face = "bold"), axis.title = element_text(size = 12, face = "bold"), axis.text.x = element_text(size = 12), axis.text.y = element_text(size = 12)) + labs(title = "Incentives that drives most to make changes to improve soil health", subtitle = "Soil Health Survey, NE, 2020") + theme(legend.position = c(0.85,1))
CD4 %>% ggplot(aes(Poll.Option, Count)) + geom_bar(aes(fill = Location), stat = "identity") + facet_wrap(~CD4$Poll.Question, ncol = 7, labeller = label_wrap_gen()) + scale_fill_brewer(palette = "Set1") + labs(x = "Ratings", y = "Number of Response") + theme(strip.text.x = element_text(size = 10, face = "bold"), axis.title = element_text(size = 12, face = "bold"), axis.text.x = element_text(size = 12), axis.text.y = element_text(size = 12)) + labs(title = "Incentives that drives most to make changes to improve soil health", subtitle = "Soil Health Survey, NE, 2020") + theme(legend.position = c(0.93,1))
CD4 %>% ggplot(aes(Poll.Option, Count)) + geom_bar(aes(fill = Location), stat = "identity") + facet_wrap(~CD4$Poll.Question, ncol = 7, labeller = label_wrap_gen()) + scale_fill_brewer(palette = "Set1") + labs(x = "Ratings", y = "Number of Response") + theme(strip.text.x = element_text(size = 10, face = "bold"), axis.title = element_text(size = 12, face = "bold"), axis.text.x = element_text(size = 12), axis.text.y = element_text(size = 12)) + labs(title = "Incentives that drives most to make changes to improve soil health", subtitle = "Soil Health Survey, NE, 2020") + theme(legend.position = c(0.93,0.8))
CD4 %>% ggplot(aes(Poll.Option, Count)) + geom_bar(aes(fill = Location), stat = "identity") + facet_wrap(~CD4$Poll.Question, ncol = 7, labeller = label_wrap_gen()) + scale_fill_brewer(palette = "Set1") + labs(x = "Ratings", y = "Number of Response") + theme(strip.text.x = element_text(size = 10, face = "bold"), axis.title = element_text(size = 12, face = "bold"), axis.text.x = element_text(size = 12), axis.text.y = element_text(size = 12)) + labs(title = "Incentives that drives most to make changes to improve soil health", subtitle = "Soil Health Survey, NE, 2020") + theme(legend.position = c(0.93,0.9))
CD4 %>% ggplot(aes(Poll.Option, Count)) + geom_bar(aes(fill = Location), stat = "identity") + facet_wrap(~CD4$Poll.Question, ncol = 7, labeller = label_wrap_gen()) + scale_fill_brewer(palette = "Set1") + labs(x = "Ratings", y = "Number of Response") + theme(strip.text.x = element_text(size = 12, face = "bold"), axis.title = element_text(size = 12, face = "bold"), axis.text.x = element_text(size = 12), axis.text.y = element_text(size = 12)) + labs(title = "Incentives that drives most to make changes to improve soil health", subtitle = "Soil Health Survey, NE, 2020") + theme(legend.position = c(0.93,0.85))
CD4 %>% ggplot(aes(Poll.Option, Count)) + geom_bar(aes(fill = Location), stat = "identity") + facet_wrap(~CD4$Poll.Question, ncol = 7, labeller = label_wrap_gen()) + scale_fill_brewer(palette = "Set1") + labs(x = "Ratings", y = "Number of Response") + theme(strip.text.x = element_text(size = 12, face = "bold"), axis.title = element_text(size = 12, face = "bold"), axis.text.x = element_text(size = 12), axis.text.y = element_text(size = 12)) + theme(legend.position = c(0.93,0.85))
CD4 %>% ggplot(aes(Poll.Option, Count)) + geom_bar(aes(fill = Location), stat = "identity") + facet_wrap(~CD4$Poll.Question, ncol = 7, labeller = label_wrap_gen()) + scale_fill_brewer(palette = "Set1") + labs(x = "Ratings", y = "Number of Response") + theme(strip.text.x = element_text(size = 13, face = "bold"), axis.title = element_text(size = 13, face = "bold"), axis.text.x = element_text(size = 13), axis.text.y = element_text(size = 13)) + theme(legend.position = c(0.93,0.85))
CD4 %>% ggplot(aes(Poll.Option, Count)) + geom_bar(aes(fill = Location), stat = "identity") + facet_wrap(~CD4$Poll.Question, ncol = 7, labeller = label_wrap_gen()) + scale_fill_brewer(palette = "Set1") + labs(x = "Ratings", y = "Number of Response") + theme(strip.text.x = element_text(size = 13, face = "bold"), axis.title = element_text(size = 13, face = "bold"), axis.text.x = element_text(size = 13), axis.text.y = element_text(size = 13)) + theme(legend.position = c(0.93,0.85), legend.text = element_text(size = 12))
#Box-plot
CD2 %>% ggplot(aes(Poll.Option)) + geom_boxplot(aes(y = Count)) + geom_point(aes(y=Count, color = Location))+ facet_wrap(~CD2$Poll.Question, ncol = 5, labeller = label_wrap_gen()) + labs(x = "Ratings", y= "Number of Response") + theme(strip.text.x = element_text(size = 12, face = "bold"), axis.title = element_text(size = 12, face = "bold"), axis.text.x = element_text(size =12), axis.text.y = element_text(size = 12))
CD2 %>% ggplot(aes(Poll.Option, Count)) + geom_bar(aes(fill = Location), stat = "identity") + facet_wrap(~CD2$Poll.Question, ncol = 5, labeller = label_wrap_gen()) + scale_fill_brewer(palette = "Paired") + labs(x = "Ratings", y = "Number of Response") + theme(strip.text.x = element_text(size = 12, face = "bold"), axis.title = element_text(size = 12, face = "bold"), axis.text.x = element_text(size =12), axis.text.y = element_text(size = 12)) + labs(title = "Obstacles for growing cover crops", subtitle = "Soil Health Survey, NE, 2020")
CD2 %>% ggplot(aes(Poll.Option, Count)) + geom_bar(aes(fill = Location), stat = "identity") + facet_wrap(~CD2$Poll.Question, ncol = 5, labeller = label_wrap_gen()) + scale_fill_brewer(palette = "Paired") + labs(x = "Ratings", y = "Number of Response") + theme(strip.text.x = element_text(size = 13, face = "bold"), axis.title = element_text(size = 13, face = "bold"), axis.text.x = element_text(size = 13), axis.text.y = element_text(size = 13))
#Box-plot
CD2 %>% ggplot(aes(Poll.Option)) + geom_boxplot(aes(y = Count)) + geom_point(aes(y=Count, color = Location))+ facet_wrap(~CD2$Poll.Question, ncol = 5, labeller = label_wrap_gen()) + labs(x = "Ratings", y= "Number of Response") + theme(strip.text.x = element_text(size = 12, face = "bold"), axis.title = element_text(size = 12, face = "bold"), axis.text.x = element_text(size =12), axis.text.y = element_text(size = 12)) + theme(legend.position = c(0.93,0.85), legend.text = element_text(size = 12))
CD2 %>% ggplot(aes(Poll.Option, Count)) + geom_bar(aes(fill = Location), stat = "identity") + facet_wrap(~CD2$Poll.Question, ncol = 5, labeller = label_wrap_gen()) + scale_fill_brewer(palette = "Paired") + labs(x = "Ratings", y = "Number of Response") + theme(strip.text.x = element_text(size = 13, face = "bold"), axis.title = element_text(size = 13, face = "bold"), axis.text.x = element_text(size = 13), axis.text.y = element_text(size = 13)) + theme(legend.position = c(0.93,0.85), legend.text = element_text(size = 12))
CD2 %>% ggplot(aes(Poll.Option, Count)) + geom_bar(aes(fill = Location), stat = "identity") + facet_wrap(~CD2$Poll.Question, ncol = 5, labeller = label_wrap_gen()) + scale_fill_brewer(palette = "Paired") + labs(x = "Ratings", y = "Number of Response") + theme(strip.text.x = element_text(size = 13, face = "bold"), axis.title = element_text(size = 13, face = "bold"), axis.text.x = element_text(size = 13), axis.text.y = element_text(size = 13)) + theme(legend.position = c(0.93,0.9), legend.text = element_text(size = 12), legend.title = element_text(size = 12))
CD2 %>% ggplot(aes(Poll.Option, Count)) + geom_bar(aes(fill = Location), stat = "identity") + facet_wrap(~CD2$Poll.Question, ncol = 5, labeller = label_wrap_gen()) + scale_fill_brewer(palette = "Paired") + labs(x = "Ratings", y = "Number of Response") + theme(strip.text.x = element_text(size = 13, face = "bold"), axis.title = element_text(size = 13, face = "bold"), axis.text.x = element_text(size = 13), axis.text.y = element_text(size = 13)) + theme(legend.position = c(0.96,0.9), legend.text = element_text(size = 12), legend.title = element_text(size = 12))
CD2 %>% ggplot(aes(Poll.Option, Count)) + geom_bar(aes(fill = Location), stat = "identity") + facet_wrap(~CD2$Poll.Question, ncol = 5, labeller = label_wrap_gen()) + scale_fill_brewer(palette = "Paired") + labs(x = "Ratings", y = "Number of Response") + theme(strip.text.x = element_text(size = 13, face = "bold"), axis.title = element_text(size = 13, face = "bold"), axis.text.x = element_text(size = 13), axis.text.y = element_text(size = 13)) + theme(legend.position = c(0.96,0.9), legend.text = element_text(size = 12), legend.title = element_text(size = 12))
CD2 %>% ggplot(aes(Poll.Option, Count)) + geom_bar(aes(fill = Location), stat = "identity") + facet_wrap(~CD2$Poll.Question, ncol = 5, labeller = label_wrap_gen()) + scale_fill_brewer(palette = "Paired") + labs(x = "Ratings", y = "Number of Response") + theme(strip.text.x = element_text(size = 13, face = "bold"), axis.title = element_text(size = 13, face = "bold"), axis.text.x = element_text(size = 13), axis.text.y = element_text(size = 13)) + theme(legend.position = c(0.96,0.92), legend.text = element_text(size = 12), legend.title = element_text(size = 12))
CD2 %>% ggplot(aes(Poll.Option, Count)) + geom_bar(aes(fill = Location), stat = "identity") + facet_wrap(~CD2$Poll.Question, ncol = 5, labeller = label_wrap_gen()) + scale_fill_brewer(palette = "Paired") + labs(x = "Ratings", y = "Number of Response") + theme(strip.text.x = element_text(size = 13, face = "bold"), axis.title = element_text(size = 13, face = "bold"), axis.text.x = element_text(size = 13), axis.text.y = element_text(size = 13)) + theme(legend.position = c(0.96,0.91), legend.text = element_text(size = 12), legend.title = element_text(size = 12))
p <- plot_1 + geom_abline(intercept = my.coef[1],
slope = my.coef[2],
aes(colour = "overall"))
my.coeff <- coef(model_lm)
p <- plot_1 + geom_abline(intercept = my.coef[1],
slope = my.coef[2],
aes(colour = "overall"))
my.coef <- coef(model_lm)
p <- plot_1 + geom_abline(intercept = my.coef[1],
slope = my.coef[2],
aes(colour = "overall"))
p <- plot_1 + geom_abline(intercept = my.coef[1],
slope = my.coef[2])
p
p + geom_smooth(method = "lm",
formula = y ~ poly(x, degree = 3),
se = FALSE, colour = "orange")
my.seg <- segmented(model_lm,
seg.Z = ~ year,
psi = NA)
my.seg <- segmented(model_lm,
seg.Z = ~year,
psi = NA)
my.seg <- segmented(model_lm,
seg.Z = ~year)
summary(my.seg)
my.seg <- segmented(model_lm,
seg.Z = ~year, psi = list(year = c(1920, 1929)))
summary(my.seg)
my.seg$psi
my.fitted <- fitted(my.seg)
my.model <- data.frame(Year = KHYO$year, Yield = KHYO$Yield)
my.model <- data.frame(Year = KHYO$year, Yield = my.fitted)
ggplot(my.model, aes(x = Year, y = Yield)) + geom_line()
ggplot(my.model, aes(x = Year, y = Yield)) + geom_line() + geom_point(KHYO, aes(year, Yield))
ggplot(my.model, aes(x = Year, y = Yield)) + geom_line() + geom_point(aes(year, Yield), data = KHYO)
ggplot(my.model, aes(x = Year, y = Yield)) + geom_line() + geom_point(aes(year, Yield), data = KHYO) + plot_1
Plot_1 + ggplot(my.model, aes(x = Year, y = Yield)) + geom_line() + geom_point(aes(year, Yield), data = KHYO)
p + ggplot(my.model, aes(x = Year, y = Yield)) + geom_line() + geom_point(aes(year, Yield), data = KHYO)
p + geom_smooth(method = "lm",
formula = y ~ poly(x, degree = 3),
se = FALSE, colour = "orange")
p + ggplot(my.model, aes(x = Year, y = Yield)) + geom_line() + geom_point(aes(year, Yield), data = KHYO)
ggplot(my.model, aes(x = Year, y = Yield)) + geom_line() + geom_point(aes(year, Yield), data = KHYO)
my.lines <- my.seg$psi[,2]
ggplot(my.model, aes(x = Year, y = Yield)) + geom_line() + geom_point(aes(year, Yield), data = KHYO) + geom_vline(xintercept = my.lines, linetype = "dashed")
my.seg2 <- segmented(model_lm, seg.Z = ~ x, npsi = 2)
my.seg2 <- segmented(model_lm, seg.Z = ~year, npsi = 2)
summary(my.seg2)
my.seg2 <- segmented(model_lm, seg.Z = ~year, npsi = 3)
summary(my.seg2)
my.seg2$psi
my.seg2 <- segmented(model_lm, seg.Z = ~year, npsi = 2)
summary(my.seg2)
my.seg2$psi
my.seg <- segmented(model_lm,
seg.Z = ~year, psi = list(year = c(1920, 1931)))
summary(my.seg)
my.lines <- my.seg$psi[,2]
ggplot(my.model, aes(x = Year, y = Yield)) + geom_line(color ) + geom_point(aes(year, Yield), data = KHYO) + geom_vline(xintercept = my.lines, linetype = "dashed")
ggplot(my.model, aes(x = Year, y = Yield)) + geom_line() + geom_point(aes(year, Yield), data = KHYO) + geom_vline(xintercept = my.lines, linetype = "dashed")
my.seg <- segmented(model_lm,
seg.Z = ~year, psi = list(year = c(1920, 1931)))
my.seg$psi
my.seg2 <- segmented(model_lm, seg.Z = ~year, npsi = 2)
my.seg2$psi
my.seg <- segmented(model_lm,
seg.Z = ~year, psi = list(year = c(1921, 1931)))
my.seg$psi
my.fitted <- fitted(my.seg)
my.model <- data.frame(Year = KHYO$year, Yield = my.fitted)
my.lines <- my.seg$psi[,2]
ggplot(my.model, aes(x = Year, y = Yield)) + geom_line() + geom_point(aes(year, Yield), data = KHYO) + geom_vline(xintercept = my.lines, linetype = "dashed")
my.seg$psi
my.line <- my.seg[,1]
plot(model_lm)
NRES803::check_assumptions(model_lm)
confd <- confint(my.seg)
confd
ggplot(my.model, aes(x = Year, y = Yield)) + geom_line() + geom_point(aes(year, Yield), data = KHYO) + geom_vline(xintercept = my.lines, linetype = "dashed") + geom_ribbon(aes(ymin= CI(95%).low))
tm <- cbind(my.model, confd)
View(tm)
confd <- confint(model_lm)
tm <- cbind(my.model, confd)
View(tm)
ggplot(my.model, aes(x = Year, y = Yield)) + geom_line() + geom_point(aes(year, Yield), data = KHYO) + geom_vline(xintercept = my.lines, linetype = "dashed")
my.line <- my.seg[,1]
my.seg <- segmented(model_lm,
seg.Z = ~year, psi = list(year = c(1920, 1931)))
ggplot(my.model, aes(x = Year, y = Yield)) + geom_line() + geom_point(aes(year, Yield), data = KHYO) + geom_vline(xintercept = my.lines, linetype = "dashed")
my.seg <- segmented(model_lm,
seg.Z = ~year, psi = list(year = c(1920, 1931)))
summary(my.seg)
my.seg$psi
my.fitted <- fitted(my.seg)
my.model <- data.frame(Year = KHYO$year, Yield = my.fitted)
my.line <- my.seg[,1]
ggplot(my.model, aes(x = Year, y = Yield)) + geom_line() + geom_point(aes(year, Yield), data = KHYO) + geom_vline(xintercept = my.lines, linetype = "dashed")
my.seg <- segmented(model_lm,
seg.Z = ~year, psi = list(year = c(1920, 1927)))
ggplot(my.model, aes(x = Year, y = Yield)) + geom_line() + geom_point(aes(year, Yield), data = KHYO) + geom_vline(xintercept = my.lines, linetype = "dashed")
summary(my.seg)
my.seg$psi
my.fitted <- fitted(my.seg)
my.model <- data.frame(Year = KHYO$year, Yield = my.fitted)
my.line <- my.seg[,1]
my.line <- my.seg[,2]
my.line <- my.seg$psi[,1]
ggplot(my.model, aes(x = Year, y = Yield)) + geom_line() + geom_point(aes(year, Yield), data = KHYO) + geom_vline(xintercept = my.lines, linetype = "dashed")
my.line
ggplot(my.model, aes(x = Year, y = Yield)) + geom_line() + geom_point(aes(year, Yield), data = KHYO) + geom_vline(xintercept = my.line, linetype = "dashed")
my.seg <- segmented(model_lm,
seg.Z = ~year, psi = list(year = c(1920, 1931)))
summary(my.seg)
my.seg$psi
my.fitted <- fitted(my.seg)
my.model <- data.frame(Year = KHYO$year, Yield = my.fitted)
my.line <- my.seg$psi[,1]
my.line
ggplot(my.model, aes(x = Year, y = Yield)) + geom_line() + geom_point(aes(year, Yield), data = KHYO) + geom_vline(xintercept = my.line, linetype = "dashed")
summary(my.seg)
my.coef <- coef(model_lm)
p <- plot_1 + geom_abline(intercept = my.coef[1],
slope = my.coef[2])
p
#plotting the lm with polynomial equation
p + geom_smooth(method = "lm",
formula = y ~ poly(x, degree = 3),
se = FALSE, colour = "orange")
#calculating the segmented equation with package segmented
my.seg <- segmented(model_lm,
seg.Z = ~year, psi = list(year = c(1920, 1931)))
#calculating the segmented equation with package segmented
my.seg <- segmented(model_lm,
seg.Z = ~year, npsi = 2)
#calculating the segmented equation with package segmented
my.seg <- segmented(model_lm,
seg.Z = ~year, npsi = 2)
summary(my.seg)
library(pander)
pander(summary(my.seg))
#finding the breakpoints and plotting
my.seg$psi
my.fitted <- fitted(my.seg)
my.model <- data.frame(Year = KHYO$year, Yield = my.fitted)
my.line <- my.seg$psi[,2]
my.line
ggplot(my.model, aes(x = Year, y = Yield)) + geom_line() + geom_point(aes(year, Yield), data = KHYO) + geom_vline(xintercept = my.line, linetype = "dashed")
#pltting
ggplot(my.model, aes(x = Year, y = Yield)) + geom_line() + geom_point(aes(year, Yield), data = KHYO) + geom_vline(xintercept = my.line, linetype = "dashed") + scale_x_continuous(breaks = seq(1912, 1941, 1))
#revising the model removing two extreme points 1921 and 1925
KHYO2 <- KHYO[-c(10,14),]
model_lm2 <- lm(Yield ~ year, data = KHYO2)
summary(model_lm2)
plot(model_lm)
my.coef2 <- coef(model_lm2)
my.coef <- coef(model_lm)
my.seg <- segmented(model_lm2,
seg.Z = ~year, npsi = 2)
my.seg2 <- segmented(model_lm2,
seg.Z = ~year, npsi = 2)
summary(my.seg2)
#finding the breakpoints and plotting
my.seg2$psi
my.fitted <- fitted(my.seg2)
my.fitted2 <- fitted(my.seg2)
my.seg2$psi
my.fitted2 <- fitted(my.seg2)
my.model2 <- data.frame(Year = KHYO2$year, Yield = my.fitted)
my.line2 <- my.seg2$psi[,2]
my.line2
ggplot(my.model2, aes(x = Year, y = Yield)) + geom_line() + geom_point(aes(year, Yield), data = KHYO2) + geom_vline(xintercept = my.line2, linetype = "dashed") + scale_x_continuous(breaks = seq(1912, 1941, 1))
my.line2 <- data.frame(c(1921, 1939))
#pltting
ggplot(my.model2, aes(x = Year, y = Yield)) + geom_line() + geom_point(aes(year, Yield), data = KHYO2) + geom_vline(xintercept = my.line2, linetype = "dashed") + scale_x_continuous(breaks = seq(1912, 1941, 1))
#pltting
ggplot(my.model2, aes(x = Year, y = Yield)) + geom_line() + geom_point(aes(year, Yield), data = KHYO2) + geom_vline(xintercept = c(1921,1939) linetype = "dashed") + scale_x_continuous(breaks = seq(1912, 1941, 1))
#plotting
ggplot(my.model2, aes(x = Year, y = Yield)) +
geom_line() + geom_point(aes(year, Yield), data = KHYO2) +
geom_vline(xintercept = c(1921,1939),linetype = "dashed") + scale_x_continuous(breaks = seq(1912, 1941, 1))
#plotting
ggplot(my.model2, aes(x = Year, y = Yield)) +
geom_line() + geom_point(aes(year, Yield), data = KHYO2) +
geom_vline(xintercept = c(1921,1939),linetype = "dashed") + scale_x_continuous(breaks = seq(1912, 1941, 1)) + theme_minimal()
#plotting
ggplot(my.model2, aes(x = Year, y = Yield)) +
geom_line() + geom_point(aes(year, Yield), data = KHYO2) +
geom_vline(xintercept = c(1921,1939),linetype = "dashed") + scale_x_continuous(breaks = seq(1912, 1941, 1)) + theme_classic()
#plotting
ggplot(my.model2, aes(x = Year, y = Yield)) +
geom_line() + geom_point(aes(year, Yield), data = KHYO2) +
geom_vline(xintercept = c(1921,1939),linetype = "dashed") + scale_x_continuous(breaks = seq(1912, 1941, 1)) + theme_classic() + labs(x = Year, y= expression("Mg ha" ^ -1 "yr" ^-1))
#plotting
ggplot(my.model2, aes(x = Year, y = Yield)) +
geom_line() + geom_point(aes(year, Yield), data = KHYO2) +
geom_vline(xintercept = c(1921,1939),linetype = "dashed") + scale_x_continuous(breaks = seq(1912, 1941, 1)) + theme_classic() + labs(x = Year, y = expression("Mg ha" ^ -1))
#plotting
ggplot(my.model2, aes(x = Year, y = Yield)) +
geom_line() + geom_point(aes(year, Yield), data = KHYO2) +
geom_vline(xintercept = c(1921,1939),linetype = "dashed") + scale_x_continuous(breaks = seq(1912, 1941, 1)) + labs(x = Year, y = expression("Mg ha" ^ -1))
#plotting
ggplot(my.model2, aes(x = Year, y = Yield)) +
geom_line() + geom_point(aes(year, Yield), data = KHYO2) +
geom_vline(xintercept = c(1921,1939),linetype = "dashed") + scale_x_continuous(breaks = seq(1912, 1941, 1)) + labs(x = "Year", y = expression("Mg ha" ^ -1))
#plotting
ggplot(my.model2, aes(x = Year, y = Yield)) +
geom_line() + geom_point(aes(year, Yield), data = KHYO2) +
geom_vline(xintercept = c(1921,1939),linetype = "dashed") + scale_x_continuous(breaks = seq(1912, 1941, 1)) + labs(x = "Year", y = expression("Mg ha" ^ -1)) + scale_y_continuous(breaks = seq(0, 3.5, 0.1))
summary(my.seg2)
#plotting
ggplot(my.model2, aes(x = Year, y = Yield)) +
geom_line() + geom_point(aes(year, Yield), data = KHYO2) +
geom_vline(xintercept = c(1921,1939),linetype = "dashed") + scale_x_continuous(breaks = seq(1912, 1941, 1)) + labs(x = "Year", y = expression("Mg ha" ^ -1)) + scale_y_continuous(breaks = seq(0, 3.5, 0.1)) + geom_label(x = 1913, y = 1.0, label = "slope = -0.239 \n  p-value = 0.001", check_overlap = TRUE, size = 3.5)
#plotting
ggplot(my.model2, aes(x = Year, y = Yield)) +
geom_line() + geom_point(aes(year, Yield), data = KHYO2) +
geom_vline(xintercept = c(1921,1939),linetype = "dashed") + scale_x_continuous(breaks = seq(1912, 1941, 1)) + labs(x = "Year", y = expression("Mg ha" ^ -1)) + scale_y_continuous(breaks = seq(0, 3.5, 0.1)) + geom_label(x = 1913, y = 1.0, label = "slope = - 0.239 \n  p-value = 0.001", check_overlap = TRUE, size = 3.5)
#plotting
ggplot(my.model2, aes(x = Year, y = Yield)) +
geom_line() + geom_point(aes(year, Yield), data = KHYO2) +
geom_vline(xintercept = c(1921,1939),linetype = "dashed") + scale_x_continuous(breaks = seq(1912, 1941, 1)) + labs(x = "Year", y = expression("Mg ha" ^ -1)) + scale_y_continuous(breaks = seq(0, 3.5, 0.1)) + geom_text(x = 1913, y = 1.0, label = "slope = - 0.239 \n  p-value = 0.001", check_overlap = TRUE, size = 3.5)
#plotting
ggplot(my.model2, aes(x = Year, y = Yield)) +
geom_line() + geom_point(aes(year, Yield), data = KHYO2) +
geom_vline(xintercept = c(1921,1939),linetype = "dashed") + scale_x_continuous(breaks = seq(1912, 1941, 1)) + labs(x = "Year", y = expression("Mg ha" ^ -1)) + scale_y_continuous(breaks = seq(0, 3.5, 0.1)) + geom_text(x = 1913, y = 1.5, label = "slope = - 0.239 \n  p-value = 0.001", check_overlap = TRUE, size = 3.5)
#plotting
ggplot(my.model2, aes(x = Year, y = Yield)) +
geom_line() + geom_point(aes(year, Yield), data = KHYO2) +
geom_vline(xintercept = c(1921,1939),linetype = "dashed") + scale_x_continuous(breaks = seq(1912, 1941, 1)) + labs(x = "Year", y = expression("Mg ha" ^ -1)) + scale_y_continuous(breaks = seq(0, 3.5, 0.1)) + geom_text(x = 1913, y = 1.5, label = "slope = - 0.239 \n  p-value = 0.001", check_overlap = TRUE, size = 3.5) + labs(title = "segmented linear model /n formula = Yield ~ Year /n breakpoint = 2 /n R-sqr = 0.87 /n adjusted R-sqr = 0.85")
#plotting
ggplot(my.model2, aes(x = Year, y = Yield)) +
geom_line() + geom_point(aes(year, Yield), data = KHYO2) +
geom_vline(xintercept = c(1921,1939),linetype = "dashed") + scale_x_continuous(breaks = seq(1912, 1941, 1)) + labs(x = "Year", y = expression("Mg ha" ^ -1)) + scale_y_continuous(breaks = seq(0, 3.5, 0.1)) + geom_text(x = 1913, y = 1.5, label = "slope = - 0.239 \n  p-value = 0.001", check_overlap = TRUE, size = 3.5) + labs(title = "segmented linear model /n formula = Yield ~ Year" /n "breakpoint = 2" /n "R-sqr = 0.87" /n "adjusted R-sqr = 0.85")
#plotting
ggplot(my.model2, aes(x = Year, y = Yield)) +
geom_line() + geom_point(aes(year, Yield), data = KHYO2) +
geom_vline(xintercept = c(1921,1939),linetype = "dashed") + scale_x_continuous(breaks = seq(1912, 1941, 1)) + labs(x = "Year", y = expression("Mg ha" ^ -1)) + scale_y_continuous(breaks = seq(0, 3.5, 0.1)) + geom_text(x = 1913, y = 1.5, label = "slope = - 0.239 \n  p-value = 0.001", check_overlap = TRUE, size = 3.5) + labs(title = "segmented linear model \n formula = Yield ~ Year \n breakpoint = 2 \n R-sqr = 0.87 \n adjusted R-sqr = 0.85")
#plotting
ggplot(my.model2, aes(x = Year, y = Yield)) +
geom_line() + geom_point(aes(year, Yield), data = KHYO2) +
geom_vline(xintercept = c(1921,1939),linetype = "dashed") + scale_x_continuous(breaks = seq(1912, 1941, 1)) + labs(x = "Year", y = expression("Mg ha" ^ -1)) + scale_y_continuous(breaks = seq(0, 3.5, 0.1)) + geom_text(x = 1913, y = 1.5, label = "slope = - 0.239 \n  p-value = 0.001", check_overlap = TRUE, size = 3.5) + labs(subtitle = "segmented linear model \n formula = Yield ~ Year \n breakpoint = 2 \n R-sqr = 0.87 \n adjusted R-sqr = 0.85")
#plotting
ggplot(my.model2, aes(x = Year, y = Yield)) +
geom_line() + geom_point(aes(year, Yield), data = KHYO2) +
geom_vline(xintercept = c(1921,1939),linetype = "dashed") + scale_x_continuous(breaks = seq(1912, 1941, 1)) + labs(x = "Year", y = expression("Mg ha" ^ -1)) + scale_y_continuous(breaks = seq(0, 3.5, 0.1)) + geom_text(x = 1913, y = 1.5, label = "slope = - 0.239 \n  p-value = 0.001", check_overlap = TRUE, size = 3.5) + labs(subtitle = "segmented linear model \n formula = Yield ~ Year \n breakpoint = 2 \n R-sqr = 0.87 \n adjusted R-sqr = 0.85") + ggtitle(atop(.(subtitle)))
#plotting
ggplot(my.model2, aes(x = Year, y = Yield)) +
geom_line() + geom_point(aes(year, Yield), data = KHYO2) +
geom_vline(xintercept = c(1921,1939),linetype = "dashed") + scale_x_continuous(breaks = seq(1912, 1941, 1)) + labs(x = "Year", y = expression("Mg ha" ^ -1)) + scale_y_continuous(breaks = seq(0, 3.5, 0.1)) + geom_text(x = 1913, y = 1.5, label = "slope = - 0.239 \n  p-value = 0.001", check_overlap = TRUE, size = 3.5) + labs(subtitle = "segmented linear model \n formula = Yield ~ Year \n breakpoint = 2 \n R-sqr = 0.87 \n adjusted R-sqr = 0.85") + theme(plot.subtitle = element_text(hjust = 0.5))
#plotting
ggplot(my.model2, aes(x = Year, y = Yield)) +
geom_line() + geom_point(aes(year, Yield), data = KHYO2) +
geom_vline(xintercept = c(1921,1939),linetype = "dashed") + scale_x_continuous(breaks = seq(1912, 1941, 1)) + labs(x = "Year", y = expression("Mg ha" ^ -1)) + scale_y_continuous(breaks = seq(0, 3.5, 0.1)) + geom_text(x = 1913, y = 1.5, label = "slope = - 0.239 \n  p-value = 0.001", check_overlap = TRUE, size = 3.5) + labs(subtitle = "Segmented Linear Model (formula = Yield ~ Year) \n breakpoint = 2 \n R-sqr = 0.87 \n adjusted R-sqr = 0.85") + theme(plot.subtitle = element_text(hjust = 0.5))
#plotting
ggplot(my.model2, aes(x = Year, y = Yield)) +
geom_line() + geom_point(aes(year, Yield), data = KHYO2) +
geom_vline(xintercept = c(1921,1939),linetype = "dashed") + scale_x_continuous(breaks = seq(1912, 1941, 1)) + labs(x = "Year", y = expression("Mg ha" ^ -1)) + scale_y_continuous(breaks = seq(0, 3.5, 0.1)) + geom_text(x = 1913, y = 1.5, label = "slope = - 0.239 \n  p-value = 0.001", check_overlap = TRUE, size = 3.5) + labs(subtitle = "Segmented Linear Model (formula = Yield ~ Year) \n Breakpoint = 2 (1921 & 1939) \n R-sqr = 0.87 ; adjusted R-sqr = 0.85") + theme(plot.subtitle = element_text(hjust = 0.5))
summary(my.seg2)
#plotting
ggplot(my.model2, aes(x = Year, y = Yield)) +
geom_line() + geom_point(aes(year, Yield), data = KHYO2) +
geom_vline(xintercept = c(1921,1939),linetype = "dashed") + scale_x_continuous(breaks = seq(1912, 1941, 1)) + labs(x = "Year", y = expression("Mg ha" ^ -1)) + scale_y_continuous(breaks = seq(0, 3.5, 0.1)) + geom_label(x = 1913, y = 1.5, label = "slope = - 0.239 \n  p-value = 0.001", check_overlap = TRUE, size = 3.5) + labs(subtitle = "Segmented Linear Model (formula = Yield ~ Year) \n Breakpoint = 2 (1921 & 1939) \n R-sqr = 0.87 ; adjusted R-sqr = 0.85") + theme(plot.subtitle = element_text(hjust = 0.5)) + geom_label(x = 1927, y= 2.2,label = "slope = 0.24503 /n p-value = ns")
#plotting
ggplot(my.model2, aes(x = Year, y = Yield)) +
geom_line() + geom_point(aes(year, Yield), data = KHYO2) +
geom_vline(xintercept = c(1921,1939),linetype = "dashed") + scale_x_continuous(breaks = seq(1912, 1941, 1)) + labs(x = "Year", y = expression("Mg ha" ^ -1)) + scale_y_continuous(breaks = seq(0, 3.5, 0.1)) + geom_label(x = 1913, y = 1.5, label = "slope = - 0.239 \n  p-value = 0.001", check_overlap = TRUE, size = 3.5) + labs(subtitle = "Segmented Linear Model (formula = Yield ~ Year) \n Breakpoint = 2 (1921 & 1939) \n R-sqr = 0.87 ; adjusted R-sqr = 0.85") + theme(plot.subtitle = element_text(hjust = 0.5)) + geom_label(x = 1927, y= 2.2,label = "slope = 0.24503 \n p-value = ns")
#plotting
ggplot(my.model2, aes(x = Year, y = Yield)) +
geom_line() + geom_point(aes(year, Yield), data = KHYO2) +
geom_vline(xintercept = c(1921,1939),linetype = "dashed") + scale_x_continuous(breaks = seq(1912, 1941, 1)) + labs(x = "Year", y = expression("Mg ha" ^ -1)) + scale_y_continuous(breaks = seq(0, 3.5, 0.1)) + geom_label(x = 1913, y = 1.5, label = "slope = - 0.239 \n  p-value = 0.001", check_overlap = TRUE, size = 3.5) + labs(subtitle = "Segmented Linear Model (formula = Yield ~ Year) \n Breakpoint = 2 (1921 & 1939) \n R-sqr = 0.87 ; adjusted R-sqr = 0.85") + theme(plot.subtitle = element_text(hjust = 0.5)) + geom_label(x = 1927, y= 2.2,label = "slope = 0.24503 \n p-value = ns") + geom_label(x = 1940, y= 2.2,label = "slope = -0.32897 \n p-value = ns")
#plotting
ggplot(my.model2, aes(x = Year, y = Yield)) +
geom_line() + geom_point(aes(year, Yield), data = KHYO2) +
geom_vline(xintercept = c(1921,1939),linetype = "dashed") + scale_x_continuous(breaks = seq(1912, 1941, 1)) + labs(x = "Year", y = expression("Mg ha" ^ -1)) + scale_y_continuous(breaks = seq(0, 3.5, 0.1)) + geom_label(x = 1913, y = 2.2, label = "slope = - 0.239 \n  p-value = 0.001", check_overlap = TRUE, size = 3.5) + labs(subtitle = "Segmented Linear Model (formula = Yield ~ Year) \n Breakpoint = 2 (1921 & 1939) \n R-sqr = 0.87 ; adjusted R-sqr = 0.85") + theme(plot.subtitle = element_text(hjust = 0.5)) + geom_label(x = 1927, y= 2.2,label = "slope = 0.24503 \n p-value = ns") + geom_label(x = 1940, y= 2.2,label = "slope = -0.32897 \n p-value = ns")
#plotting
ggplot(my.model2, aes(x = Year, y = Yield)) +
geom_line() + geom_point(aes(year, Yield), data = KHYO2) +
geom_vline(xintercept = c(1921,1939),linetype = "dashed") + scale_x_continuous(breaks = seq(1912, 1941, 1)) + labs(x = "Year", y = expression("Mg ha" ^ -1)) + scale_y_continuous(breaks = seq(0, 3.5, 0.1)) + geom_label(x = 1913, y = 2.2, label = "slope = - 0.239 \n  p-value = 0.001", check_overlap = TRUE, size = 3.5) + labs(subtitle = "Segmented Linear Model (formula = Yield ~ Year) \n Breakpoint = 2 (1921 & 1939) \n R-sqr = 0.87 ; adjusted R-sqr = 0.85") + theme(plot.subtitle = element_text(hjust = 0.5)) + geom_label(x = 1927, y= 2.2,label = "slope = 0.24503 \n p-value = ns") + geom_label(x = 1941, y= 2.2,label = "slope = -0.32897 \n p-value = ns")
#plotting
ggplot(my.model2, aes(x = Year, y = Yield)) +
geom_line() + geom_point(aes(year, Yield), data = KHYO2) +
geom_vline(xintercept = c(1921,1939),linetype = "dashed") + scale_x_continuous(breaks = seq(1912, 1942, 1)) + labs(x = "Year", y = expression("Mg ha" ^ -1)) + scale_y_continuous(breaks = seq(0, 3.5, 0.1)) + geom_label(x = 1913, y = 2.2, label = "slope = - 0.239 \n  p-value = 0.001", check_overlap = TRUE, size = 3.5) + labs(subtitle = "Segmented Linear Model (formula = Yield ~ Year) \n Breakpoint = 2 (1921 & 1939) \n R-sqr = 0.87 ; adjusted R-sqr = 0.85") + theme(plot.subtitle = element_text(hjust = 0.5)) + geom_label(x = 1927, y= 2.2,label = "slope = 0.24503 \n p-value = ns") + geom_label(x = 1941, y= 2.2,label = "slope = -0.32897 \n p-value = ns")
#plotting
ggplot(my.model2, aes(x = Year, y = Yield)) +
geom_line() + geom_point(aes(year, Yield), data = KHYO2) +
geom_vline(xintercept = c(1921,1939),linetype = "dashed") + scale_x_continuous(breaks = seq(1912, 1942, 1)) + labs(x = "Year", y = expression("Mg ha" ^ -1)) + scale_y_continuous(breaks = seq(0, 3.5, 0.1)) + geom_label(x = 1913, y = 2.2, label = "slope = - 0.239 \n  p-value = 0.001", check_overlap = TRUE) + labs(subtitle = "Segmented Linear Model (formula = Yield ~ Year) \n Breakpoint = 2 (1921 & 1939) \n R-sqr = 0.87 ; adjusted R-sqr = 0.85") + theme(plot.subtitle = element_text(hjust = 0.5)) + geom_label(x = 1927, y= 2.2,label = "slope = 0.24503 \n p-value = ns") + geom_label(x = 1941, y= 2.2,label = "slope = -0.32897 \n p-value = ns")
#plotting
ggplot(my.model2, aes(x = Year, y = Yield)) +
geom_line() + geom_point(aes(year, Yield), data = KHYO2) +
geom_vline(xintercept = c(1921,1939),linetype = "dashed") + scale_x_continuous(breaks = seq(1912, 1942, 1)) + labs(x = "Year", y = expression("Mg ha" ^ -1)) + scale_y_continuous(breaks = seq(0, 3.5, 0.1)) + geom_label(x = 1913, y = 2.2, label = "slope = - 0.239 \n  p-value = 0.001", check_overlap = TRUE) + labs(subtitle = "Segmented Linear Model (formula = Yield ~ Year) \n Breakpoint = 2 (1921 & 1939) \n R-sqr = 0.87 ; adjusted R-sqr = 0.85") + theme(plot.subtitle = element_text(hjust = 0.5)) + geom_label(x = 1927, y= 2.2,label = "slope = 0.24503 \n p-value = ns") + geom_label(x = 1941, y= 2.2,label = "slope = -0.32897 \n p-value = ns") + theme(axis.text.x = element_text(angle = 45))
#plotting
ggplot(my.model2, aes(x = Year, y = Yield)) +
geom_line() + geom_point(aes(year, Yield), data = KHYO2) +
geom_vline(xintercept = c(1921,1939),linetype = "dashed") + scale_x_continuous(breaks = seq(1912, 1942, 1)) + labs(x = "Year", y = expression("Mg ha" ^ -1)) + scale_y_continuous(breaks = seq(0, 3.5, 0.1)) + geom_label(x = 1913, y = 2.2, label = "slope = - 0.239 \n  p-value = 0.001", check_overlap = TRUE) + labs(subtitle = "Segmented Linear Model (formula = Yield ~ Year) \n Breakpoint = 2 (1921 & 1939) \n R-sqr = 0.87 ; adjusted R-sqr = 0.85") + theme(plot.subtitle = element_text(hjust = 0.5)) + geom_label(x = 1927, y= 2.2,label = "slope = 0.24503 \n p-value = ns") + geom_label(x = 1941, y= 2.2,label = "slope = -0.32897 \n p-value = ns") + theme(axis.text.x = element_text(angle = 90))
#plotting
ggplot(my.model2, aes(x = Year, y = Yield)) +
geom_line() + geom_point(aes(year, Yield), data = KHYO2) +
geom_vline(xintercept = c(1921,1939),linetype = "dashed") + scale_x_continuous(breaks = seq(1912, 1942, 1)) + labs(x = "Year", y = expression("Mg ha" ^ -1)) + scale_y_continuous(breaks = seq(0, 3.5, 0.1)) + geom_label(x = 1913, y = 2.2, label = "slope = - 0.239 \n  p-value = 0.001", check_overlap = TRUE) + labs(subtitle = "Segmented Linear Model (formula = Yield ~ Year) \n Breakpoint = 2 (1921 & 1939) \n R-sqr = 0.87 ; adjusted R-sqr = 0.85") + theme(plot.subtitle = element_text(hjust = 0.5)) + geom_label(x = 1927, y= 2.2,label = "slope = 0.24503 \n p-value = ns") + geom_label(x = 1939, y= 2.2,label = "slope = -0.32897 \n p-value = ns") + theme(axis.text.x = element_text(angle = 90))
#plotting
ggplot(my.model2, aes(x = Year, y = Yield)) +
geom_line() + geom_point(aes(year, Yield), data = KHYO2) +
geom_vline(xintercept = c(1921,1939),linetype = "dashed") + scale_x_continuous(breaks = seq(1912, 1942, 1)) + labs(x = "Year", y = expression("Mg ha" ^ -1)) + scale_y_continuous(breaks = seq(0, 3.5, 0.1)) + geom_label(x = 1913, y = 2.2, label = "slope = - 0.239 \n  p-value = 0.001", check_overlap = TRUE) + labs(subtitle = "Segmented Linear Model (formula = Yield ~ Year) \n Breakpoint = 2 (1921 & 1939) \n R-sqr = 0.87 ; adjusted R-sqr = 0.85") + theme(plot.subtitle = element_text(hjust = 0.5)) + geom_label(x = 1927, y= 2.2,label = "slope = 0.24503 \n p-value = ns") + geom_label(x = 1939, y= 2.2,label = "slope = -0.32897 \n p-value = ns") + theme(axis.text.x = element_text(angle = 90)) + theme_classic()
#plotting
ggplot(my.model2, aes(x = Year, y = Yield)) +
geom_line() + geom_point(aes(year, Yield), data = KHYO2) +
geom_vline(xintercept = c(1921,1939),linetype = "dashed") + scale_x_continuous(breaks = seq(1912, 1942, 1)) + labs(x = "Year", y = expression("Mg ha" ^ -1)) + scale_y_continuous(breaks = seq(0, 3.5, 0.1)) + geom_label(x = 1913, y = 2.2, label = "slope = - 0.239 \n  p-value = 0.001", check_overlap = TRUE) + labs(subtitle = "Segmented Linear Model (formula = Yield ~ Year) \n Breakpoint = 2 (1921 & 1939) \n R-sqr = 0.87 ; adjusted R-sqr = 0.85") + theme(plot.subtitle = element_text(hjust = 0.5)) + geom_label(x = 1927, y= 2.2,label = "slope = 0.24503 \n p-value = ns") + geom_label(x = 1939, y= 2.2,label = "slope = -0.32897 \n p-value = ns") + theme(axis.text.x = element_text(angle = 90)) + theme_linedraw()
#plotting
ggplot(my.model2, aes(x = Year, y = Yield)) +
geom_line() + geom_point(aes(year, Yield), data = KHYO2) +
geom_vline(xintercept = c(1921,1939),linetype = "dashed") + scale_x_continuous(breaks = seq(1912, 1942, 1)) + labs(x = "Year", y = expression("Mg ha" ^ -1)) + scale_y_continuous(breaks = seq(0, 3.5, 0.1)) + geom_label(x = 1913, y = 2.2, label = "slope = - 0.239 \n  p-value = 0.001", check_overlap = TRUE) + labs(subtitle = "Segmented Linear Model (formula = Yield ~ Year) \n Breakpoint = 2 (1921 & 1939) \n R-sqr = 0.87 ; adjusted R-sqr = 0.85") + theme(plot.subtitle = element_text(hjust = 0.5)) + geom_label(x = 1927, y= 2.2,label = "slope = 0.24503 \n p-value = ns") + geom_label(x = 1939, y= 2.2,label = "slope = -0.32897 \n p-value = ns") + theme(axis.text.x = element_text(angle = 90)) + theme_gray()
#plotting
ggplot(my.model2, aes(x = Year, y = Yield)) +
geom_line() + geom_point(aes(year, Yield), data = KHYO2) +
geom_vline(xintercept = c(1921,1939),linetype = "dashed") + scale_x_continuous(breaks = seq(1912, 1942, 1)) + labs(x = "Year", y = expression("Mg ha" ^ -1)) + scale_y_continuous(breaks = seq(0, 3.5, 0.1)) + geom_label(x = 1913, y = 2.2, label = "slope = - 0.239 \n  p-value = 0.001", check_overlap = TRUE) + labs(subtitle = "Segmented Linear Model (formula = Yield ~ Year) \n Breakpoint = 2 (1921 & 1939) \n R-sqr = 0.87 ; adjusted R-sqr = 0.85") + theme(plot.subtitle = element_text(hjust = 0.5)) + geom_label(x = 1927, y= 2.2,label = "slope = 0.24503 \n p-value = ns") + geom_label(x = 1939, y= 2.2,label = "slope = -0.32897 \n p-value = ns") + theme(axis.text.x = element_text(angle = 90)) + coord_capped_cart(bottom = "right")
install.packages("lemon")
library(lemon)
#plotting
ggplot(my.model2, aes(x = Year, y = Yield)) +
geom_line() + geom_point(aes(year, Yield), data = KHYO2) +
geom_vline(xintercept = c(1921,1939),linetype = "dashed") + scale_x_continuous(breaks = seq(1912, 1942, 1)) + labs(x = "Year", y = expression("Mg ha" ^ -1)) + scale_y_continuous(breaks = seq(0, 3.5, 0.1)) + geom_label(x = 1913, y = 2.2, label = "slope = - 0.239 \n  p-value = 0.001", check_overlap = TRUE) + labs(subtitle = "Segmented Linear Model (formula = Yield ~ Year) \n Breakpoint = 2 (1921 & 1939) \n R-sqr = 0.87 ; adjusted R-sqr = 0.85") + theme(plot.subtitle = element_text(hjust = 0.5)) + geom_label(x = 1927, y= 2.2,label = "slope = 0.24503 \n p-value = ns") + geom_label(x = 1939, y= 2.2,label = "slope = -0.32897 \n p-value = ns") + theme(axis.text.x = element_text(angle = 90)) + coord_capped_cart(bottom = "right")
#plotting
ggplot(my.model2, aes(x = Year, y = Yield)) +
geom_line() + geom_point(aes(year, Yield), data = KHYO2) +
geom_vline(xintercept = c(1921,1939),linetype = "dashed") + scale_x_continuous(breaks = seq(1912, 1942, 1)) + labs(x = "Year", y = expression("Mg ha" ^ -1)) + scale_y_continuous(breaks = seq(0, 3.5, 0.1)) + geom_label(x = 1913, y = 2.2, label = "slope = - 0.239 \n  p-value = 0.001", check_overlap = TRUE) + labs(subtitle = "Segmented Linear Model (formula = Yield ~ Year) \n Breakpoint = 2 (1921 & 1939) \n R-sqr = 0.87 ; adjusted R-sqr = 0.85") + theme(plot.subtitle = element_text(hjust = 0.5)) + geom_label(x = 1927, y= 2.2,label = "slope = 0.24503 \n p-value = ns") + geom_label(x = 1939, y= 2.2,label = "slope = -0.32897 \n p-value = ns") + theme(axis.text.x = element_text(angle = 90)) + theme(panel.border = element_rect())
#plotting
ggplot(my.model2, aes(x = Year, y = Yield)) +
geom_line() + geom_point(aes(year, Yield), data = KHYO2) +
geom_vline(xintercept = c(1921,1939),linetype = "dashed") + scale_x_continuous(breaks = seq(1912, 1942, 1)) + labs(x = "Year", y = expression("Mg ha" ^ -1)) + scale_y_continuous(breaks = seq(0, 3.5, 0.1)) + geom_label(x = 1913, y = 2.2, label = "slope = - 0.239 \n  p-value = 0.001", check_overlap = TRUE) + labs(subtitle = "Segmented Linear Model (formula = Yield ~ Year) \n Breakpoint = 2 (1921 & 1939) \n R-sqr = 0.87 ; adjusted R-sqr = 0.85") + theme(plot.subtitle = element_text(hjust = 0.5)) + geom_label(x = 1927, y= 2.2,label = "slope = 0.24503 \n p-value = ns") + geom_label(x = 1939, y= 2.2,label = "slope = -0.32897 \n p-value = ns") + theme(axis.text.x = element_text(angle = 90)) + theme(panel.border = element_line())
#plotting
ggplot(my.model2, aes(x = Year, y = Yield)) +
geom_line() + geom_point(aes(year, Yield), data = KHYO2) +
geom_vline(xintercept = c(1921,1939),linetype = "dashed") + scale_x_continuous(breaks = seq(1912, 1942, 1)) + labs(x = "Year", y = expression("Mg ha" ^ -1)) + scale_y_continuous(breaks = seq(0, 3.5, 0.1)) + geom_label(x = 1913, y = 2.2, label = "slope = - 0.239 \n  p-value = 0.001", check_overlap = TRUE) + labs(subtitle = "Segmented Linear Model (formula = Yield ~ Year) \n Breakpoint = 2 (1921 & 1939) \n R-sqr = 0.87 ; adjusted R-sqr = 0.85") + theme(plot.subtitle = element_text(hjust = 0.5)) + geom_label(x = 1927, y= 2.2,label = "slope = 0.24503 \n p-value = ns") + geom_label(x = 1939, y= 2.2,label = "slope = -0.32897 \n p-value = ns") + theme(axis.text.x = element_text(angle = 90)) + theme(panel.border = element_blank())
#plotting
ggplot(my.model2, aes(x = Year, y = Yield)) +
geom_line() + geom_point(aes(year, Yield), data = KHYO2) +
geom_vline(xintercept = c(1921,1939),linetype = "dashed") + scale_x_continuous(breaks = seq(1912, 1942, 1)) + labs(x = "Year", y = expression("Mg ha" ^ -1)) + scale_y_continuous(breaks = seq(0, 3.5, 0.1)) + geom_label(x = 1913, y = 2.2, label = "slope = - 0.239 \n  p-value = 0.001", check_overlap = TRUE) + labs(subtitle = "Segmented Linear Model (formula = Yield ~ Year) \n Breakpoint = 2 (1921 & 1939) \n R-sqr = 0.87 ; adjusted R-sqr = 0.85") + theme(plot.subtitle = element_text(hjust = 0.5)) + geom_label(x = 1927, y= 2.2,label = "slope = 0.24503 \n p-value = ns") + geom_label(x = 1939, y= 2.2,label = "slope = -0.32897 \n p-value = ns") + theme(axis.text.x = element_text(angle = 90)) + theme(panel.border = element_blank(), axis.line = element_line())
#plotting
ggplot(my.model2, aes(x = Year, y = Yield)) +
geom_line() + geom_point(aes(year, Yield), data = KHYO2) +
geom_vline(xintercept = c(1921,1939),linetype = "dashed") + scale_x_continuous(breaks = seq(1912, 1942, 1)) + labs(x = "Year", y = expression("Mg ha" ^ -1)) + scale_y_continuous(breaks = seq(0, 3.5, 0.1)) + geom_label(x = 1913, y = 2.2, label = "slope = - 0.239 \n  p-value = 0.001", check_overlap = TRUE) + labs(subtitle = "Segmented Linear Model (formula = Yield ~ Year) \n Breakpoint = 2 (1921 & 1939) \n R-sqr = 0.87 ; adjusted R-sqr = 0.85") + theme(plot.subtitle = element_text(hjust = 0.5)) + geom_label(x = 1927, y= 2.2,label = "slope = 0.24503 \n p-value = ns") + geom_label(x = 1939, y= 2.2,label = "slope = -0.32897 \n p-value = ns") + theme(axis.text.x = element_text(angle = 90)) + theme(panel.border = element_blank(), axis.line = element_line())
summary(model_lm2)
#plotting
ggplot(my.model2, aes(x = Year, y = Yield)) +
geom_line() + geom_point(aes(year, Yield), data = KHYO2) +
geom_vline(xintercept = c(1921,1939),linetype = "dashed") + scale_x_continuous(breaks = seq(1912, 1942, 1)) + labs(x = "Year", y = expression("Mg ha" ^ -1)) + scale_y_continuous(breaks = seq(0, 3.5, 0.1)) + geom_label(x = 1913, y = 2.2, label = "slope = - 0.239 \n  p-value = 0.001", check_overlap = TRUE) + labs(subtitle = "Segmented Linear Model (formula = ) \n Breakpoint = 2 (1921 & 1939) \n R-sqr = 0.87 ; adjusted R-sqr = 0.85") + theme(plot.subtitle = element_text(hjust = 0.5)) + geom_label(x = 1927, y = 2.2,label = "slope = 0.245 \n p-value = ns") + geom_label(x = 1939, y = 2.2,label = "slope = -0.329 \n p-value = ns") + theme(axis.text.x = element_text(angle = 90)) + theme(panel.border = element_blank(), axis.line = element_line())
#plotting
ggplot(my.model2, aes(x = Year, y = Yield)) +
geom_line() + geom_point(aes(year, Yield), data = KHYO2) +
geom_vline(xintercept = c(1921,1939),linetype = "dashed") + scale_x_continuous(breaks = seq(1912, 1942, 1)) + labs(x = "Year", y = expression("Mg ha" ^ -1)) + scale_y_continuous(breaks = seq(0, 3.5, 0.1)) + geom_label(x = 1913, y = 2.2, label = "slope = - 0.239 \n  p-value = 0.001", check_overlap = TRUE) + labs(subtitle = "Segmented Linear Model (formula = Yield ~ Year ) \n Breakpoint = 2 (1921 & 1939) \n R-sqr = 0.87 ; adjusted R-sqr = 0.85") + theme(plot.subtitle = element_text(hjust = 0.5)) + geom_label(x = 1927, y = 2.2,label = "slope = 0.245 \n p-value = ns") + geom_label(x = 1939, y = 2.2,label = "slope = -0.329 \n p-value = ns") + theme(axis.text.x = element_text(angle = 90)) + theme(panel.border = element_blank(), axis.line = element_line())
summary(my.seg2)
NRES803::check_assumptions(my.seg2)
#Stacked Bar plot
CD2$Poll.Question <- factor(CD2$Poll.Question, levels = c("1. Input costs including seed cost", "2. Weather issues","3. Farm machinery and equipment","4. Farm labor","5. Potential of a crop yield lag","6. The window and later crop harvest","7. Allowing livestock to graze cover crops","8. Termination of cover crop issues","9. Pest issues","10. It limits my herbicide options"))
CD2 %>% ggplot(aes(Poll.Option, Count)) + geom_bar(aes(fill = Location), stat = "identity") + facet_wrap(~CD2$Poll.Question, ncol = 5, labeller = label_wrap_gen()) + scale_fill_brewer(palette = "Paired") + labs(x = "Ratings", y = "Number of Response") + theme(strip.text.x = element_text(size = 13, face = "bold"), axis.title = element_text(size = 13, face = "bold"), axis.text.x = element_text(size = 13), axis.text.y = element_text(size = 13)) + theme(legend.position = c(0.96,0.91), legend.text = element_text(size = 12), legend.title = element_text(size = 12))
CD2 %>% ggplot(aes(Poll.Option, Count)) + geom_bar(aes(fill = Location), stat = "identity") + facet_wrap(~CD2$Poll.Question, ncol = 5, labeller = label_wrap_gen()) + scale_fill_brewer(palette = "Paired") + labs(x = "Ratings", y = "Number of Response") + theme(strip.text.x = element_text(size = 13, face = "bold"), axis.title = element_text(size = 13, face = "bold"), axis.text.x = element_text(size = 13), axis.text.y = element_text(size = 13)) + theme(legend.position = c(0.96,0.91), legend.text = element_text(size = 12), legend.title = element_text(size = 12)) + theme(axis.text.x = element_text(size = 15), axis.text.y = element_text(size = 15))
CD2 %>% ggplot(aes(Poll.Option, Count)) + geom_bar(aes(fill = Location), stat = "identity") + facet_wrap(~CD2$Poll.Question, ncol = 5, labeller = label_wrap_gen()) + scale_fill_brewer(palette = "Paired") + labs(x = "Ratings", y = "Number of Response") + theme(strip.text.x = element_text(size = 13, face = "bold"), axis.title = element_text(size = 13, face = "bold"), axis.text.x = element_text(size = 13), axis.text.y = element_text(size = 13)) + theme(legend.position = c(0.96,0.91), legend.text = element_text(size = 12), legend.title = element_text(size = 12)) + theme(axis.text.x = element_text(size = 15, face = "bold"), axis.text.y = element_text(size = 15, face = "bold"))
CD2 %>% ggplot(aes(Poll.Option, Count)) + geom_bar(aes(fill = Location), stat = "identity") + facet_wrap(~CD2$Poll.Question, ncol = 5, labeller = label_wrap_gen()) + scale_fill_brewer(palette = "Paired") + labs(x = "Ratings", y = "Number of Response") + theme(strip.text.x = element_text(size = 13, face = "bold"), axis.title = element_text(size = 13, face = "bold"), axis.text.x = element_text(size = 13), axis.text.y = element_text(size = 13)) + theme(legend.position = c(0.96,0.91), legend.text = element_text(size = 12), legend.title = element_text(size = 12)) + theme(axis.text.x = element_text(size = 15, face = "bold"), axis.text.y = element_text(size = 15, face = "bold"), axis.text = element_text(size = 15))
CD2 %>% ggplot(aes(Poll.Option, Count)) + geom_bar(aes(fill = Location), stat = "identity") + facet_wrap(~CD2$Poll.Question, ncol = 5, labeller = label_wrap_gen()) + scale_fill_brewer(palette = "Paired") + labs(x = "Ratings", y = "Number of Response") + theme(strip.text.x = element_text(size = 13, face = "bold"), axis.title = element_text(size = 13, face = "bold"), axis.text.x = element_text(size = 13), axis.text.y = element_text(size = 13)) + theme(legend.position = c(0.96,0.91), legend.text = element_text(size = 12), legend.title = element_text(size = 12)) + theme(axis.text.x = element_text(size = 15, face = "bold"), axis.text.y = element_text(size = 15, face = "bold"), axis.text = element_text(size = 17))
CD2 %>% ggplot(aes(Poll.Option, Count)) + geom_bar(aes(fill = Location), stat = "identity") + facet_wrap(~CD2$Poll.Question, ncol = 5, labeller = label_wrap_gen()) + scale_fill_brewer(palette = "Paired") + labs(x = "Ratings", y = "Number of Response") + theme(strip.text.x = element_text(size = 13, face = "bold"), axis.title = element_text(size = 13, face = "bold"), axis.text.x = element_text(size = 13), axis.text.y = element_text(size = 13)) + theme(legend.position = c(0.5,0.91), legend.text = element_text(size = 12), legend.title = element_text(size = 12)) + theme(axis.text.x = element_text(size = 15, face = "bold"), axis.text.y = element_text(size = 15, face = "bold"), axis.text = element_text(size = 17))
CD2 %>% ggplot(aes(Poll.Option, Count)) + geom_bar(aes(fill = Location), stat = "identity") + facet_wrap(~CD2$Poll.Question, ncol = 5, labeller = label_wrap_gen()) + scale_fill_brewer(palette = "Paired") + labs(x = "Ratings", y = "Number of Response") + theme(strip.text.x = element_text(size = 13, face = "bold"), axis.title = element_text(size = 13, face = "bold"), axis.text.x = element_text(size = 13), axis.text.y = element_text(size = 13)) + theme(legend.position = c(0.56,0.91), legend.text = element_text(size = 12), legend.title = element_text(size = 12)) + theme(axis.text.x = element_text(size = 15, face = "bold"), axis.text.y = element_text(size = 15, face = "bold"), axis.text = element_text(size = 17))
CD2 %>% ggplot(aes(Poll.Option, Count)) + geom_bar(aes(fill = Location), stat = "identity") + facet_wrap(~CD2$Poll.Question, ncol = 5, labeller = label_wrap_gen()) + scale_fill_brewer(palette = "Paired") + labs(x = "Ratings", y = "Number of Response") + theme(strip.text.x = element_text(size = 13, face = "bold"), axis.title = element_text(size = 13, face = "bold"), axis.text.x = element_text(size = 13), axis.text.y = element_text(size = 13)) + theme(legend.position = c(0.61,0.91), legend.text = element_text(size = 12), legend.title = element_text(size = 12)) + theme(axis.text.x = element_text(size = 15, face = "bold"), axis.text.y = element_text(size = 15, face = "bold"), axis.text = element_text(size = 17))
CD2 %>% ggplot(aes(Poll.Option, Count)) + geom_bar(aes(fill = Location), stat = "identity") + facet_wrap(~CD2$Poll.Question, ncol = 5, labeller = label_wrap_gen()) + scale_fill_brewer(palette = "Paired") + labs(x = "Ratings", y = "Number of Response") + theme(strip.text.x = element_text(size = 13, face = "bold"), axis.title = element_text(size = 13, face = "bold"), axis.text.x = element_text(size = 13), axis.text.y = element_text(size = 13)) + theme(legend.position = c(0.59,0.91), legend.text = element_text(size = 12), legend.title = element_text(size = 12)) + theme(axis.text.x = element_text(size = 15, face = "bold"), axis.text.y = element_text(size = 15, face = "bold"), axis.text = element_text(size = 17))
CD4 %>% ggplot(aes(Poll.Option, Count)) + geom_bar(aes(fill = Location), stat = "identity") + facet_wrap(~CD4$Poll.Question, ncol = 7, labeller = label_wrap_gen()) + scale_fill_brewer(palette = "Set1") + labs(x = "Ratings", y = "Number of Response") + theme(strip.text.x = element_text(size = 13, face = "bold"), axis.title = element_text(size = 13, face = "bold"), axis.text.x = element_text(size = 13), axis.text.y = element_text(size = 13)) + theme(legend.position = c(0.59,0.91), legend.text = element_text(size = 12), legend.title = element_text(size = 12)) + theme(axis.text.x = element_text(size = 15, face = "bold"), axis.text.y = element_text(size = 15, face = "bold"), axis.text = element_text(size = 17))
CD4 %>% ggplot(aes(Poll.Option, Count)) + geom_bar(aes(fill = Location), stat = "identity") + facet_wrap(~CD4$Poll.Question, ncol = 7, labeller = label_wrap_gen()) + scale_fill_brewer(palette = "Set1") + labs(x = "Ratings", y = "Number of Response") + theme(strip.text.x = element_text(size = 13, face = "bold"), axis.title = element_text(size = 13, face = "bold"), axis.text.x = element_text(size = 13), axis.text.y = element_text(size = 13)) + theme(legend.position = c(0.59,0.91), legend.text = element_text(size = 14), legend.title = element_text(size = 12)) + theme(axis.text.x = element_text(size = 15, face = "bold"), axis.text.y = element_text(size = 15, face = "bold"), axis.text = element_text(size = 17))
CD4 %>% ggplot(aes(Poll.Option, Count)) + geom_bar(aes(fill = Location), stat = "identity") + facet_wrap(~CD4$Poll.Question, ncol = 7, labeller = label_wrap_gen()) + scale_fill_brewer(palette = "Set1") + labs(x = "Ratings", y = "Number of Response") + theme(strip.text.x = element_text(size = 13, face = "bold"), axis.title = element_text(size = 13, face = "bold"), axis.text.x = element_text(size = 13), axis.text.y = element_text(size = 13)) + theme(legend.position = c(0.59,0.91), legend.text = element_text(size = 14), legend.title = element_text(size = 15)) + theme(axis.text.x = element_text(size = 15, face = "bold"), axis.text.y = element_text(size = 15, face = "bold"), axis.text = element_text(size = 17))
CD4 %>% ggplot(aes(Poll.Option, Count)) + geom_bar(aes(fill = Location), stat = "identity") + facet_wrap(~CD4$Poll.Question, ncol = 7, labeller = label_wrap_gen()) + scale_fill_brewer(palette = "Set1") + labs(x = "Ratings", y = "Number of Response") + theme(strip.text.x = element_text(size = 13, face = "bold"), axis.title = element_text(size = 13, face = "bold"), axis.text.x = element_text(size = 13), axis.text.y = element_text(size = 13)) + theme(legend.position = c(0.59,0.91), legend.text = element_text(size = 14), legend.title = element_text(size = 15)) + theme(axis.text.x = element_text(size = 15, face = "bold"), axis.text.y = element_text(size = 15, face = "bold"), axis.text = element_text(size = 17))
summary(my.seg2)
#plotting
ggplot(my.model2, aes(x = Year, y = Yield)) +
geom_line() + geom_point(aes(year, Yield), data = KHYO2) +
geom_vline(xintercept = c(1921,1939),linetype = "dashed") + scale_x_continuous(breaks = seq(1912, 1942, 1)) + labs(x = "Year", y = expression("Mg ha" ^ -1)) + scale_y_continuous(breaks = seq(0, 3.5, 0.1)) + geom_label(x = 1913, y = 2.2, label = "slope = - 0.239 \n  p-value = 0.001", check_overlap = TRUE) + labs(subtitle = "Segmented Linear Model (formula = Yield ~ Year ) \n Breakpoint = 2 (1921 & 1939) \n R-sqr = 0.87 ; adjusted R-sqr = 0.85") + theme(plot.subtitle = element_text(hjust = 0.5)) + geom_label(x = 1927, y = 2.2,label = "slope = 0.245 \n p-value = ns") + geom_label(x = 1939, y = 2.2,label = "slope = -0.329 \n p-value = ns") + theme(axis.text.x = element_text(angle = 90)) + theme(panel.border = element_blank(), axis.line = element_line())
US_Corn_Yield_Historic <- read.csv("C:/Users/sdas4/Box/2020/Bijesh_KnorHolden/Revision/US_Corn_Yield_Historic.csv")
View(US_Corn_Yield_Historic)
#Comparing the corn yield data
#US national vs Knorr_Holden
CU <- US_Corn_Yield_Historic
CU %>% ggplot(aes(Year, Value)) + geom_point()
CU %>% ggplot(aes(Year, Value)) + geom_point() + geom_smooth()
CU %>% ggplot(aes(Year, Value)) + geom_point()
CU %>% ggplot(aes(Year, Value)) + geom_point() + geom_line()
CU %>% ggplot(aes(Year, Value)) + geom_point() + geom_point(aes(year, Old_Rep$X0..old.rep. ), data = Old_Rep)
CU %>% ggplot(aes(Year, Value)) + geom_point() + geom_point(aes(year, Old_Rep$X0..old.rep. ), data = Old_Rep, color = "red")
CU %>% mutate(Yield_kg/ha = Value*62.77)
View(CU)
CU2 <- CU %>% mutate(Yield_kg/ha = Value*62.77)
View(CU2)
#Comparing the corn yield data
#US national vs Knorr_Holden
CU <- US_Corn_Yield_Historic
CU2 <- CU %>% mutate(Yield_kg = Value*62.77)
View(CU2)
CU %>% mutate(Yield_Mg = Yield_kg*0.001)
CU2 %>% mutate(Yield_Mg = Yield_kg*0.001)
CU2 %>% ggplot(aes(Year, Yield_Mg)) + geom_point() + geom_point(aes(year, Old_Rep$X0..old.rep. ), data = Old_Rep, color = "red")
CU2 = CU2 %>% mutate(Yield_Mg = Yield_kg*0.001)
#Comparing the corn yield data
#US national vs Knorr_Holden
CU <- US_Corn_Yield_Historic
CU2 <- CU %>% mutate(Yield_kg = Value*62.77)
CU2 = CU2 %>% mutate(Yield_Mg = Yield_kg*0.001)
CU2 %>% ggplot(aes(Year, Yield_Mg)) + geom_point() + geom_point(aes(year, Old_Rep$X0..old.rep. ), data = Old_Rep, color = "red")
CU2 %>% ggplot(aes(Year, Yield_Mg)) + geom_point() + geom_point(aes(year, Old_Rep$X0..old.rep. ), data = Old_Rep, color = "red") + scale_x_continuous(breaks = seq(min(CU2$Year, 2020, 1)))
CU2 %>% ggplot(aes(Year, Yield_Mg)) + geom_point() + geom_point(aes(year, Old_Rep$X0..old.rep. ), data = Old_Rep, color = "red") + scale_x_continuous(breaks = seq(min(CU2$Year), 2020, 1)))
CU2 %>% ggplot(aes(Year, Yield_Mg)) + geom_point() + geom_point(aes(year, Old_Rep$X0..old.rep. ), data = Old_Rep, color = "red") + scale_x_continuous(breaks = seq(min(CU2$Year), 2020, 1))
CU2 %>% ggplot(aes(Year, Yield_Mg)) + geom_point() + geom_point(aes(year, Old_Rep$X0..old.rep. ), data = Old_Rep, color = "red") + scale_x_continuous(breaks = seq(min(CU2$Year), 2020, 1)) + theme(axis.text.x = element_text(angle = 90))
CU2 %>% group_by(Data.Item) %>% ggplot(aes(Year, Yield_Mg)) + geom_point() + geom_point(aes(year, Old_Rep$X0..old.rep. ), data = Old_Rep, color = "red") + scale_x_continuous(breaks = seq(min(CU2$Year), 2020, 1)) + theme(axis.text.x = element_text(angle = 90))
CU2 %>% group_by(Data.Item) %>% ggplot(aes(Year, Yield_Mg)) + geom_point(aes(color = Data.Item)) + geom_point(aes(year, Old_Rep$X0..old.rep. ), data = Old_Rep, color = "red") + scale_x_continuous(breaks = seq(min(CU2$Year), 2020, 1)) + theme(axis.text.x = element_text(angle = 90))
CU2 %>% group_by(Data.Item) %>% filter(Data.Item == "CORN, GRAIN − YIELD, MEASURED IN BU / ACRE") %>% ggplot(aes(Year, Yield_Mg)) + geom_point(aes(color = Data.Item)) + geom_point(aes(year, Old_Rep$X0..old.rep. ), data = Old_Rep, color = "red") + scale_x_continuous(breaks = seq(min(CU2$Year), 2020, 1)) + theme(axis.text.x = element_text(angle = 90))
#Comparing the corn yield data
#US national vs Knorr_Holden
CU <- US_Corn_Yield_Historic[,-c(4,7:13)]
View(CU)
CU2 %>% group_by(Data.Item) %>% filter(Data.Item == "CORN, GRAIN − YIELD, MEASURED IN BU / ACRE", Domain== "Total") %>% ggplot(aes(Year, Yield_Mg)) + geom_point(aes(color = Data.Item)) + geom_point(aes(year, Old_Rep$X0..old.rep. ), data = Old_Rep, color = "red") + scale_x_continuous(breaks = seq(min(CU2$Year), 2020, 1)) + theme(axis.text.x = element_text(angle = 90))
CU2 %>% group_by(Data.Item) %>% filter(Data.Item == "CORN, GRAIN − YIELD, MEASURED IN BU / ACRE", Domain == "Total") %>% ggplot(aes(Year, Yield_Mg)) + geom_point(color = "black") + geom_point(aes(year, Old_Rep$X0..old.rep. ), data = Old_Rep, color = "red") + scale_x_continuous(breaks = seq(min(CU2$Year), 2020, 1)) + theme(axis.text.x = element_text(angle = 90))
CU %>% group_by(Data.Item) %>% filter(Data.Item == "CORN, GRAIN − YIELD, MEASURED IN BU / ACRE", Domain == "Total") %>% ggplot(aes(Year, Yield_Mg)) + geom_point(color = "black") + geom_point(aes(year, Old_Rep$X0..old.rep. ), data = Old_Rep, color = "red") + scale_x_continuous(breaks = seq(min(CU2$Year), 2020, 1)) + theme(axis.text.x = element_text(angle = 90))
CU %>% group_by(Data.Item) %>% filter(Data.Item == "CORN, GRAIN − YIELD, MEASURED IN BU / ACRE", Domain == "Total") %>%
ggplot(aes(Year, Value)) + geom_point(color = "black") + geom_point(aes(year, Old_Rep$X0..old.rep. ), data = Old_Rep, color = "red") + scale_x_continuous(breaks = seq(min(CU2$Year), 2020, 1)) + theme(axis.text.x = element_text(angle = 90))
CU %>% group_by(Data.Item, Domain) %>% filter(Data.Item == "CORN, GRAIN − YIELD, MEASURED IN BU / ACRE", Domain == "Total") %>%
ggplot(aes(Year, Value)) + geom_point(color = "black") + geom_point(aes(year, Old_Rep$X0..old.rep. ), data = Old_Rep, color = "red") + scale_x_continuous(breaks = seq(min(CU2$Year), 2020, 1)) + theme(axis.text.x = element_text(angle = 90))
#Comparing the corn yield data
#US national vs Knorr_Holden
CU <- US_Corn_Yield_Historic[,-c(4,7:13)]
CU %>% group_by(Data.Item, Domain) %>% filter(Data.Item == "CORN, GRAIN − YIELD, MEASURED IN BU / ACRE", Domain == "Total") %>%
ggplot(aes(Year, Value)) + geom_point(color = "black") + geom_point(aes(year, Old_Rep$X0..old.rep. ), data = Old_Rep, color = "red") + scale_x_continuous(breaks = seq(min(CU2$Year), 2020, 1)) + theme(axis.text.x = element_text(angle = 90))
CU %>% group_by(Data.Item, Domain) %>% filter(Data.Item == "CORN, GRAIN, IRRIGATED - YIELD, MEASURED IN BU / ACRE", Domain == "Total") %>%
ggplot(aes(Year, Value)) + geom_point(color = "black") + geom_point(aes(year, Old_Rep$X0..old.rep. ), data = Old_Rep, color = "red") + scale_x_continuous(breaks = seq(min(CU2$Year), 2020, 1)) + theme(axis.text.x = element_text(angle = 90))
ND <- CU %>% group_by(Data.Item, Domain) %>% filter(Data.Item == "CORN, GRAIN, IRRIGATED - YIELD, MEASURED IN BU / ACRE", Domain == "Total")
ND
ND <- CU %>%  filter(Data.Item == "CORN, GRAIN, IRRIGATED - YIELD, MEASURED IN BU / ACRE", Domain == "Total")
ND
ND <- CU %>%  filter(Data.Item == "CORN, GRAIN, IRRIGATED - YIELD, MEASURED IN BU / ACRE", Domain == "TOTAL")
ND
ND <- CU %>%  group_by(Data.Item, Domain) %>% filter(Data.Item == "CORN, GRAIN, IRRIGATED - YIELD, MEASURED IN BU / ACRE", Domain == "TOTAL")
ND
ND <- CU %>%  group_by(Data.Item, Domain) %>% filter(Data.Item == "CORN, GRAIN, IRRIGATED - YIELD, MEASURED IN BU / ACRE", Domain == "TOTAL") %>% ggplot(aes(Year, Value)) + geom_point()
CU %>%  group_by(Data.Item, Domain) %>% filter(Data.Item == "CORN, GRAIN, IRRIGATED - YIELD, MEASURED IN BU / ACRE", Domain == "TOTAL") %>% ggplot(aes(Year, Value)) + geom_point()
CU %>% filter(Data.Item == "CORN, GRAIN, IRRIGATED - YIELD, MEASURED IN BU / ACRE", Domain == "TOTAL") %>% ggplot(aes(Year, Value)) + geom_point()
Data <- CU %>% group_by(Year,Data.Item,Domain) %>% filter(Data.Item == "CORN, GRAIN, IRRIGATED - YIELD, MEASURED IN BU / ACRE", Domain == "TOTAL")
View(Data)
Data <- CU %>% group_by(Year,Data.Item,Domain) %>% filter(Data.Item == c("CORN, GRAIN, IRRIGATED - YIELD, MEASURED IN BU / ACRE", "CORN, GRAIN - YIELD, MEASURED IN BU / ACRE", "CORN, GRAIN, IRRIGATED, ENTIRE CROP - YIELD, MEASURED IN BU / ACRE
"), Domain == "TOTAL")
Data <- CU %>% group_by(Year,Data.Item,Domain) %>%
filter(Data.Item == "CORN, GRAIN, IRRIGATED - YIELD, MEASURED IN BU / ACRE" | Data.Item == "CORN, GRAIN - YIELD, MEASURED IN BU / ACRE"| Data.Item == "CORN, GRAIN, IRRIGATED, ENTIRE CROP - YIELD, MEASURED IN BU / ACRE", Domain == "TOTAL")
View(Data)
Data <- CU %>% group_by(Year,Data.Item,Domain) %>%
filter(Data.Item == "CORN, GRAIN, IRRIGATED - YIELD, MEASURED IN BU / ACRE" | Data.Item == "CORN, GRAIN - YIELD, MEASURED IN BU / ACRE"| Data.Item == "CORN, GRAIN, IRRIGATED, ENTIRE CROP - YIELD, MEASURED IN BU / ACRE", Domain == "TOTAL", Period == "YEAR")
View(Data)
Data %>% ggplot(aes(Year, Value)) + geom_point()
Data %>% ggplot(aes(Year[Year==1910:2012], Value)) + geom_point()
Data %>% ggplot(aes(Year, Value)) + geom_point()
Data %>% ggplot(aes(Year, Value)) + geom_point() + geom_point(aes(year, Old_Rep$X0..old.rep.), data = Old_Rep)
Data <- CU %>% group_by(Year,Data.Item,Domain) %>%
filter(Data.Item == "CORN, GRAIN, IRRIGATED - YIELD, MEASURED IN BU / ACRE" | Data.Item == "CORN, GRAIN - YIELD, MEASURED IN BU / ACRE"| Data.Item == "CORN, GRAIN, IRRIGATED, ENTIRE CROP - YIELD, MEASURED IN BU / ACRE", Domain == "TOTAL", Period == "YEAR") %>% mutate(Yield_kg = Value*62.77, Yield_Mg = Yield_kg*0.001)
Data %>% ggplot(aes(Year, Yield_Mg)) + geom_point() + geom_point(aes(year, Old_Rep$X0..old.rep.), data = Old_Rep)
Data %>% ggplot(aes(Year, Yield_Mg)) + geom_point() + geom_point(aes(year, Old_Rep$X0..old.rep.), data = Old_Rep, color = "red")
Data %>% ggplot(aes(Year, Yield_Mg)) + geom_point() + geom_point(aes(year, Old_Rep$X0..old.rep.), data = Old_Rep, color = "red") + geom_line(data = Old_Rep)
Data %>% ggplot(aes(Year, Yield_Mg)) + geom_point() + geom_point(aes(year, Old_Rep$X0..old.rep.), data = Old_Rep, color = "red") + geom_line(aes(y= Old_Rep$X0..old.rep.), data = Old_Rep)
Data %>% ggplot(aes(Year, Yield_Mg)) + geom_point() + geom_point(aes(year, X0..old.rep.), data = Old_Rep, color = "red") + geom_line(aes(y= Old_Rep$X0..old.rep.), data = Old_Rep)
Data %>% ggplot(aes(Year, Yield_Mg)) + geom_point() + geom_point(aes(year, X0..old.rep.), data = Old_Rep, color = "red")
Data %>% ggplot(aes(Year, Yield_Mg)) + geom_point() + geom_point(aes(year, X0..old.rep.), data = Old_Rep, color = "red") + geom_point(aes(Yr, Yield, color = N), data = KH_Yield)
Data %>% ggplot(aes(Year, Yield_Mg)) + geom_point() + geom_point(aes(year, X0..old.rep.), data = Old_Rep, color = "red") + geom_point(aes(Yr, Yield, color = c(N, Manure)), data = KH_Yield)
Data %>% ggplot(aes(Year, Yield_Mg)) + geom_point() + geom_point(aes(year, X0..old.rep.), data = Old_Rep, color = "red") + geom_point(aes(Yr, Yield, color = N, data = KH_Yield)
Data %>% ggplot(aes(Year, Yield_Mg)) + geom_point() + geom_point(aes(year, X0..old.rep.), data = Old_Rep, color = "red") + geom_point(aes(Yr, Yield, color = N, data = KH_Yield)
Data %>% ggplot(aes(Year, Yield_Mg)) + geom_point() + geom_point(aes(year, X0..old.rep.), data = Old_Rep, color = "red") + geom_point(aes(Yr, Yield, color = N), data = KH_Yield)
>>>>>>> c85a2e99ab4a4a5861242e6b7f18f34d1e60f023
